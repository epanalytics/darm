"""
Copyright (c) 2013, Jurriaan Bremer
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
* Neither the name of the darm developer(s) nor the names of its
  contributors may be used to endorse or promote products derived from this
  software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
"""

from darmbits import *

# details in the ARMv7-a reference manual
thumbneon = [
#    ('VABA<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
#    ('VABA<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
#    ('VABA<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
#    ('VABA<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
#    ('VABA<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
#    ('VABA<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
#
#    ('VABA<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
#    ('VABA<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
#    ('VABA<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
#    ('VABA<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
#    ('VABA<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
#    ('VABA<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
#
#    ('VABAL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VABAL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VABAL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VABAL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VABAL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VABAL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#
#    ('VABD<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 1, N, 1, M, 0, Dm),
#    ('VABD<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 1, N, 1, M, 0, Dm),
#    ('VABD<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 1, N, 1, M, 0, Dm),
#    ('VABD<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 1, N, 1, M, 0, Dm),
#    ('VABD<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 1, N, 1, M, 0, Dm),
#    ('VABD<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 1, N, 1, M, 0, Dm),
#
#    ('VABD<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 1, N, 0, M, 1, Qm),
#    ('VABD<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 1, N, 0, M, 1, Qm),
#    ('VABD<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 1, N, 0, M, 1, Qm),
#    ('VABD<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 1, N, 0, M, 1, Qm),
#    ('VABD<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 1, N, 0, M, 1, Qm),
#    ('VABD<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 1, N, 0, M, 1, Qm),
#
#    ('VABDL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
#    ('VABDL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
#    ('VABDL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
#    ('VABDL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
#    ('VABDL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
#    ('VABDL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
#
#    ('VABD<c>.F32  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VABD<c>.F32  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Qm),
#
#    ('VABS<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 1, 1, 0, 0, M, 0, Dm),
#    ('VABS<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 1, 1, 0, 0, M, 0, Dm),
#    ('VABS<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 1, 1, 0, 0, M, 0, Dm),
#    ('VABS<c>.F32 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),
#
#    ('VABS<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 1, 1, 0, 1, M, 0, Qm),
#    ('VABS<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 1, 1, 0, 1, M, 0, Qm),
#    ('VABS<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 1, 1, 0, 1, M, 0, Qm),
#    ('VABS<c>.F32 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),
#
#    ('VACGE<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 0, N, 0, M, 1, Dm),
#    ('VACGE<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 1, 1, 0, N, 1, M, 1, Qm),
#
#    ('VACGT<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 0, N, 0, M, 1, Dm),
#    ('VACGT<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 1, 1, 0, N, 1, M, 1, Qm),
#
#    ('VADD<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VADD<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VADD<c>.I32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VADD<c>.I64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#
#    ('VADD<c>.I8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
#    ('VADD<c>.I16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
#    ('VADD<c>.I32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
#    ('VADD<c>.I64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
#
    ('VADD<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 0, Dm),
    ('VADD<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Qm),
#
#    ('VADDHN<c>.I16 <Dd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 0, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
#    ('VADDHN<c>.I32 <Dd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 1, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
#    ('VADDHN<c>.I64 <Dd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 1, 0, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
#
#    ('VADDL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VADDL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VADDL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VADDL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VADDL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VADDL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#
#    ('VADDW<c>.S8  <Qd>, <Qn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VADDW<c>.S16 <Qd>, <Qn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VADDW<c>.S32 <Qd>, <Qn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VADDW<c>.U8  <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VADDW<c>.U16 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VADDW<c>.U32 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#
#    ('VAND<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VAND<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),
#
#    #('VBIC<c>.I16 <Dd>, #<imm>', 1, 1, 1, i, 1, 1, 1, 1, 1, D, 0, 0, 0, imm3, Dd, cmode, 0, 0, 1, 1, imm4),
#    #('VBIC<c>.I32 <Dd>, #<imm>', 1, 1, 1, i, 1, 1, 1, 1, 1, D, 0, 0, 0, imm3, Dd, cmode, 0, 0, 1, 1, imm4),
#    #('VBIC<c>.I16 <Qd>, #<imm>', 1, 1, 1, i, 1, 1, 1, 1, 1, D, 0, 0, 0, imm3, Qd, cmode, 0, 1, 1, 1, imm4),
#    #('VBIC<c>.I32 <Qd>, #<imm>', 1, 1, 1, i, 1, 1, 1, 1, 1, D, 0, 0, 0, imm3, Qd, cmode, 0, 1, 1, 1, imm4), # TODO figure out cmode
#
#    ('VBIC<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VBIC<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),
#
#    ('VBIF<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VBIF<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),
#
#    ('VBIT<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VBIT<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),
#
#    ('VBSL<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VBSL<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),
#
#    ('VCEQ<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VCEQ<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VCEQ<c>.I8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VCEQ<c>.I16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),
#
#    ('VCEQ<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 0, N, 0, M, 0, Dm),
#    ('VCEQ<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 1, 1, 0, N, 1, M, 0, Qm),
#
#    ('VCEQ<c>.I8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
#    ('VCEQ<c>.I16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
#    ('VCEQ<c>.I32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
#    ('VCEQ<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 0, 1, 0, 0, M, 0, Dm),
#
#    ('VCEQ<c>.I8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
#    ('VCEQ<c>.I16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
#    ('VCEQ<c>.I32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
#    ('VCEQ<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 0, 1, 0, 1, M, 0, Qm),
#
#    ('VCGE<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
#    ('VCGE<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
#    ('VCGE<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
#    ('VCGE<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
#    ('VCGE<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
#    ('VCGE<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
#
#    ('VCGE<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
#    ('VCGE<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
#    ('VCGE<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
#    ('VCGE<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
#    ('VCGE<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
#    ('VCGE<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
#
#    ('VCGE<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 1, N, 1, M, 1, Dm),
#    ('VCGE<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
#
#    ('VCGE<c>.S8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
#    ('VCGE<c>.S16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
#    ('VCGE<c>.S32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
#    ('VCGE<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),
#
#    ('VCGE<c>.S8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
#    ('VCGE<c>.S16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
#    ('VCGE<c>.S32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
#    ('VCGE<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),
#
#    ('VCGT<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VCGT<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VCGT<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VCGT<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VCGT<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VCGT<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#
#    ('VCGT<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
#    ('VCGT<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
#    ('VCGT<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
#    ('VCGT<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
#    ('VCGT<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
#    ('VCGT<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
#
#    ('VCGT<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 0, N, 0, M, 0, Dm),
#    ('VCGT<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 1, 1, 0, N, 1, M, 0, Qm),
#
#    ('VCGT<c>.S8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
#    ('VCGT<c>.S16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
#    ('VCGT<c>.S32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
#    ('VCGT<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),
#
#    ('VCGT<c>.S8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
#    ('VCGT<c>.S16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
#    ('VCGT<c>.S32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
#    ('VCGT<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),
#
#    ('VCLE<c>.S8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),
#    ('VCLE<c>.S16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),
#    ('VCLE<c>.S32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),
#    ('VCLE<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 0, 1, 1, 0, M, 0, Dm),
#
#    ('VCLE<c>.S8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
#    ('VCLE<c>.S16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
#    ('VCLE<c>.S32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
#    ('VCLE<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 0, 1, 1, 1, M, 0, Qm),
#
#    ('VCLS<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),
#    ('VCLS<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),
#    ('VCLS<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),
#
#    ('VCLS<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),
#    ('VCLS<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),
#    ('VCLS<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),
#
#    ('VCLT<c>.S8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
#    ('VCLT<c>.S16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
#    ('VCLT<c>.S32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
#    ('VCLT<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),
#
#    ('VCLT<c>.S8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
#    ('VCLT<c>.S16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
#    ('VCLT<c>.S32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
#    ('VCLT<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),
#
#    ('VCLZ<c>.I8  <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),
#    ('VCLZ<c>.I16 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),
#    ('VCLZ<c>.I32 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),
#
#    ('VCLZ<c>.I8  <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),
#    ('VCLZ<c>.I16 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),
#    ('VCLZ<c>.I32 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),
#
#    ('VCNT<c>.8 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 0, 1, 0, 0, M, 0, Dm),
#    ('VCNT<c>.8 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 0, 1, 0, 1, M, 0, Qm),
#
#    ('VCVT<c>.S32.F32 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),
#    ('VCVT<c>.U32.F32 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),
#    ('VCVT<c>.F32.S32 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),
#    ('VCVT<c>.F32.U32 <Dd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 1, 0, 1, 0, M, 0, Dm),
#
#    ('VCVT<c>.S32.F32 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),
#    ('VCVT<c>.U32.F32 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),
#    ('VCVT<c>.F32.S32 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),
#    ('VCVT<c>.F32.U32 <Qd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 1, 0, 1, 1, M, 0, Qm),
#
#    ('VCVT<c>.S32.F32 <Dd>, <Dm>, #<fbits>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, imm6, Dd, 1, 1, 1, 1, 0, 0, M, 1, Dm),
#    ('VCVT<c>.U32.F32 <Dd>, <Dm>, #<fbits>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, imm6, Dd, 1, 1, 1, 1, 0, 0, M, 1, Dm),
#    ('VCVT<c>.F32.S32 <Dd>, <Dm>, #<fbits>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, imm6, Dd, 1, 1, 1, 0, 0, 0, M, 1, Dm),
#    ('VCVT<c>.F32.U32 <Dd>, <Dm>, #<fbits>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, imm6, Dd, 1, 1, 1, 0, 0, 0, M, 1, Dm),
#
#    ('VCVT<c>.S32.F32 <Qd>, <Qm>, #<fbits>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, imm6, Qd, 1, 1, 1, 1, 0, 1, M, 1, Qm),
#    ('VCVT<c>.U32.F32 <Qd>, <Qm>, #<fbits>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, imm6, Qd, 1, 1, 1, 1, 0, 1, M, 1, Qm),
#    ('VCVT<c>.F32.S32 <Qd>, <Qm>, #<fbits>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, imm6, Qd, 1, 1, 1, 0, 0, 1, M, 1, Qm),
#    ('VCVT<c>.F32.U32 <Qd>, <Qm>, #<fbits>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, imm6, Qd, 1, 1, 1, 0, 0, 1, M, 1, Qm),
#
#    ('VCVT<c>.F16.F32 <Dd>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 1, 1, 0, 0, 0, M, 0, Qm),
#    ('VCVT<c>.F32.F16 <Qd>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Qd, 0, 1, 1, 1, 0, 0, M, 0, Dm),
#
#    #('VDUP<c>.8  <Dd>, <Dm[x]>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, imm4, Dd, 1, 1, 0, 0, 0, 0, M, 0, Dm), FIXME size depends on value of imm4
#    #('VDUP<c>.16 <Dd>, <Dm[x]>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, imm4, Dd, 1, 1, 0, 0, 0, 0, M, 0, Dm),
#    #('VDUP<c>.32 <Dd>, <Dm[x]>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, imm4, Dd, 1, 1, 0, 0, 0, 0, M, 0, Dm),
#
#    #('VDUP<c>.8  <Qd>, <Dm[x]>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, imm4, Qd, 1, 1, 0, 0, 0, 1, M, 0, Qm), FIXME size depends on value of imm4
#    #('VDUP<c>.16 <Qd>, <Dm[x]>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, imm4, Qd, 1, 1, 0, 0, 0, 1, M, 0, Qm),
#    #('VDUP<c>.32 <Qd>, <Dm[x]>', 1, 1, 1, 1, 1, 1, 1, 1, 1, D, 1, 1, imm4, Qd, 1, 1, 0, 0, 0, 1, M, 0, Qm),
#
#    ('VDUP<c>.8  <Dd>, <Rt>', 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, Dd, Rt, 1, 0, 1, 1, D, 0, 0, 1, (0), (0), (0), (0)),
#    ('VDUP<c>.16 <Dd>, <Rt>', 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, Dd, Rt, 1, 0, 1, 1, D, 0, 1, 1, (0), (0), (0), (0)),
#    ('VDUP<c>.32 <Dd>, <Rt>', 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, Dd, Rt, 1, 0, 1, 1, D, 0, 0, 1, (0), (0), (0), (0)),
#
#    ('VDUP<c>.8  <Qd>, <Rt>', 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, Qd, Rt, 1, 0, 1, 1, D, 0, 0, 1, (0), (0), (0), (0)),
#    ('VDUP<c>.16 <Qd>, <Rt>', 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, Qd, Rt, 1, 0, 1, 1, D, 0, 1, 1, (0), (0), (0), (0)),
#    ('VDUP<c>.32 <Qd>, <Rt>', 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, Qd, Rt, 1, 0, 1, 1, D, 0, 0, 1, (0), (0), (0), (0)),
#
#    ('VEOR<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VEOR<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),
#
#    ('VEXT<c>.8 <Dd>, <Dn>, <Dm>, #<imm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 1, 1, Dn, Dd, imm4, N, 0, M, 0, Dm),
#    ('VEXT<c>.8 <Qd>, <Qn>, <Qm>, #<imm>', 1, 1, 1, 0, 1, 1, 1, 1, 1, D, 1, 1, Qn, Qd, imm4, N, 1, M, 0, Qm),
#
#    ('VFMA<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 0, N, 0, M, 1, Dm),
#    ('VFMA<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 1, 0, 0, N, 1, M, 1, Qm),
#    ('VFMS<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 0, 0, N, 0, M, 1, Dm),
#    ('VFMS<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 1, 0, 0, N, 1, M, 1, Qm),
#
#    ('VHADD<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VHADD<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VHADD<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VHADD<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VHADD<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VHADD<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
#
#    ('VHADD<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
#    ('VHADD<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
#    ('VHADD<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
#    ('VHADD<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
#    ('VHADD<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
#    ('VHADD<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
#
#    ('VHSUB<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VHSUB<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VHSUB<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VHSUB<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VHSUB<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VHSUB<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#
#    ('VHSUB<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VHSUB<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VHSUB<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VHSUB<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VHSUB<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VHSUB<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
#
## 1 Reg
#  # align = ommitted
#    # writeback/Rm
#    ('VLD1<c>.8  <Dd>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
#
#    ('VLD1<c>.8  <Dd>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1),
#
#    ('VLD1<c>.8  <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, Rm),
#    ('VLD1<c>.16 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, Rm),
#    ('VLD1<c>.32 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, Rm),
#    ('VLD1<c>.64 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, Rm),
#
#  # align = 64
#    # writeback/Rm
#    ('VLD1<c>.8  <Dd>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1),
#
#    ('VLD1<c>.8  <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1),
#
#    ('VLD1<c>.8  <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, Rm),
#    ('VLD1<c>.16 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, Rm),
#    ('VLD1<c>.32 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, Rm),
#    ('VLD1<c>.64 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, Rm),
#
## 2 reg
#  # align = omitted
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),
#
#    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),
#
#    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, Rm),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, Rm),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, Rm),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, Rm),
#
#  # align = 64
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),
#
#    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),
#
#    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, Rm),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, Rm),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, Rm),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, Rm),
#
#  # align = 128
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1),
#
#    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1),
#
#    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, Rm),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, Rm),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, Rm),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, Rm),
#
## 3 regs
#  # align = omitted
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),
#
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),
#
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, Rm),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, Rm),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, Rm),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, Rm),
#
#  # align = 64
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),
#
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),
#
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, Rm),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, Rm),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, Rm),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, Rm),
#
## 4 regs
#  # align = omitted
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, Rm),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, Rm),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, Rm),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, Rm),
#  # align = 64
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, Rm),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, Rm),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, Rm),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, Rm),
#  # align = 128
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1),
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1),
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, Rm),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, Rm),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, Rm),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, Rm),
#  # align = 256
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1),
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1),
#    # writeback/Rm
#      # size
#    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, Rm),
#    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, Rm),
#    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, Rm),
#    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, Rm),
#
#### FIXME figure out index, pg A8-901
##    ('VLD1<c>.8  <Dd[x]>, [<Rn>:align]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 0, 0, 0, 0, index, Rm),
##    ('VLD1<c>.16 <Dd[x]>, [<Rn>:align]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 0, 1, 0, 0, index, Rm),
##    ('VLD1<c>.32 <Dd[x]>, [<Rn>:align]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 0, 0, 0, index, Rm),
##
##    ('VLD1<c>.8  <Dd[x]>, [<Rn>:align]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 0, 0, 0, 0, index, Rm),
##    ('VLD1<c>.16 <Dd[x]>, [<Rn>:align]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 0, 1, 0, 0, index, Rm),
##    ('VLD1<c>.32 <Dd[x]>, [<Rn>:align]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 0, 0, 0, index, Rm),
##
##    ('VLD1<c>.8  <Dd[x]>, [<Rn>:align]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 0, 0, 0, 0, index, Rm),
##    ('VLD1<c>.16 <Dd[x]>, [<Rn>:align]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 0, 1, 0, 0, index, Rm),
##    ('VLD1<c>.32 <Dd[x]>, [<Rn>:align]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 0, 0, 0, index, Rm),
#
## single element to all lanes A8-902
#    ('VLD1<c>.8  <Dd[]>, [<Rn>]',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd[]>, [<Rn>]',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd[]>, [<Rn>]',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd[]>, [<Rn>:16]', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd[]>, [<Rn>:32]', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VLD1<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>]',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>]',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>]',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:16]', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:32]', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1),
#
#    ('VLD1<c>.8  <Dd[]>, [<Rn>]!',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd[]>, [<Rn>]!',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd[]>, [<Rn>]!',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd[]>, [<Rn>:16]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd[]>, [<Rn>:32]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VLD1<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>]!',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>]!',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>]!',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:16]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:32]!', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1),
#
#    ('VLD1<c>.8  <Dd[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 0, 0, Rm),
#    ('VLD1<c>.16 <Dd[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 0, Rm),
#    ('VLD1<c>.32 <Dd[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 0, Rm),
#    ('VLD1<c>.16 <Dd[]>, [<Rn>:16], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 1, Rm),
#    ('VLD1<c>.32 <Dd[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 1, Rm),
#
#    ('VLD1<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 1, 0, Rm),
#    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 0, Rm),
#    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 0, Rm),
#    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:16], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 1, Rm),
#    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 1, Rm),
#
#    # A8-904 VLD2 multiple 2-element structures
## align = ommitted
#    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),
## !
#    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),
## rm
#    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, Rm),
#
#    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, Rm),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, Rm),
#
## align = 64
## no writeback
#    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#
## writeback
#    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#
## Rm
#    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, Rm),
#
#    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, Rm),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, Rm),
#
#
## align = 128
## no writeback
#    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1),
#
## writeback
#    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1),
#
## Rm
#    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, Rm),
#
#    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, Rm),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, Rm),
#
## align = 256
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, Rm),
#    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, Rm),
#    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 1, 0, 0, 1, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, Rm),

    ## FIXME from here till end of THUMB needs conversion/encoding checking -- copied from arm table
#    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>:16]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),
#
#    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>:16]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1),
#    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1),
##
#    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>:16]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),
#
#    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>:16]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1),
#    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1),
##
#    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 0, Rm),
#    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 0, Rm),
#    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 0, Rm),
#
#    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>:16], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 1, Rm),
#    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 1, Rm),
#    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 1, Rm),
#
#    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 0, Rm),
#    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 0, Rm),
#    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 0, Rm),
#
#    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>:16], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 1, Rm),
#    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 1, Rm),
#    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 1, Rm),
#
#    # VLD3 multiple 3-element structures A8-910
## align = omitted
#    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
##
#    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),
##
#    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, Rm),
#    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, Rm),
#    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, Rm),
#
#    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, Rm),
#    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, Rm),
#    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, Rm),
## align = 64
#    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
##
#    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
##
#    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, Rm),
#    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, Rm),
#    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, Rm),
#
#    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, Rm),
#    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, Rm),
#    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, Rm),
#
#    # VLD3 single 3-element structure to one lane A8-912
#    # FIXME TODO figure out index_align ('VLD3<c>.size <list> [<Rn>:align]!, <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, size, 1, 0, index_align, Rm),
#
#    # VLD3 single 3-element structure to all lanes A8-914
#    ('VLD3<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD3<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD3<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VLD3<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD3<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD3<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#
#    ('VLD3<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD3<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD3<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VLD3<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD3<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD3<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#
#    ('VLD3<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 0, 0, Rm),
#    ('VLD3<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 0, 0, Rm),
#    ('VLD3<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 0, 0, Rm),
#
#    ('VLD3<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 1, 0, Rm),
#    ('VLD3<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 1, 0, Rm),
#    ('VLD3<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 1, 0, Rm),
#
#    # VLD4 multiple 4-element structures
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1),
#
##
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1),
##
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, Rm),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, Rm),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, Rm),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, Rm),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, Rm),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, Rm),
#
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, Rm),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, Rm),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, Rm),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, Rm),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, Rm),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, Rm),
#
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, Rm),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, Rm),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, Rm),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, Rm),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, Rm),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, Rm),
#
#    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, Rm),
#    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, Rm),
#    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, Rm),
#
#    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, Rm),
#    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, Rm),
#    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, Rm),
#
#    # VLD4 single 4-element structure to one lane
#    # FIXME TODO ('VLD4<c>.size <list>, [<Rn>:align]!, <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, size, 1, 1, index_align, Rm),
#
#    # VLD4 single 4-element structure to all lanes
## omitted
#    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1),
## 32
#    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
## 64
#    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1),
## 128
#    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1),
#
#    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
#
# # omitted
#    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1),
## 32
#    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1),
## 64
#    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1),
## 128
#    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1),
#
#    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1),
#
#  # omitted
#    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 0, Rm),
#    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 0, Rm),
#    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 0, Rm),
#
#    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 0, Rm),
#    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 0, Rm),
#    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 0, Rm),
## 32
#    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 1, Rm),
#
#    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 1, Rm),
## 64
#    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 1, Rm),
#    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 1, Rm),
#
#    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 1, Rm),
#    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 1, Rm),
## 128
#    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 0, 1, Rm),
#
#    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 1, 1, Rm),
#
#    # VLDM A8-922
#    ('VLDMIA<c>.64 <Rn>, <list>',  cond, 1, 1, 0, 0, 1, D, 0, 1, Rn, Dd, 1, 0, 1, 1, imm8),
#    ('VLDMIA<c>.64 <Rn>!, <list>', cond, 1, 1, 0, 0, 1, D, 1, 1, Rn, Dd, 1, 0, 1, 1, imm8),
#    ('VLDMDB<c>.64 <Rn>!, <list>', cond, 1, 1, 0, 1, 0, D, 1, 1, Rn, Dd, 1, 0, 1, 1, imm8),
#
    # VLDR A8-924
    ('VLDR<c>.64 <Dd>, [<Rn>,#+<imm>]', 1, 1, 1, 0, 1, 1, 0, 1, 1, D, 0, 1, Rn, Dd, 1, 0, 1, 1, imm(8, {'m': 4})),
    ('VLDR<c>.64 <Dd>, [<Rn>,#-<imm>]', 1, 1, 1, 0, 1, 1, 0, 1, 0, D, 0, 1, Rn, Dd, 1, 0, 1, 1, imm(8, {'m': -4})),
    #('VLDR<c> <Dd>, <label>', cond, 1, 1, 0, 1, U, D, 0, 1, Rn, Vd, 1, 0, 1, 1, imm8), FIXME U depends on value of label
    #('VLDR<c> <Dd>, [PC, #-0]', cond, 1, 1, 0, 1, U, D, 0, 1, Rn, Vd, 1, 0, 1, 1, imm8),
#
#    # VMAX/MIN A8-926
#    ('VMAX<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
#    ('VMAX<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
#    ('VMAX<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
#    ('VMAX<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
#    ('VMAX<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
#    ('VMAX<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
#
#    ('VMAX<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
#    ('VMAX<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
#    ('VMAX<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
#    ('VMAX<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
#    ('VMAX<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
#    ('VMAX<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
#
#    ('VMIN<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
#    ('VMIN<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
#    ('VMIN<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
#    ('VMIN<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
#    ('VMIN<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
#    ('VMIN<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
#
#    ('VMIN<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
#    ('VMIN<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
#    ('VMIN<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
#    ('VMIN<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
#    ('VMIN<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
#    ('VMIN<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
#
#    # VMAX/MIN (floating-point) A8-928
#    ('VMAX<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 0, Dm),
#    ('VMAX<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 1, 1, 1, N, 1, M, 0, Qm),
#
#    ('VMIN<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 0, Dm),
#    ('VMIN<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 1, 1, 1, N, 1, M, 0, Qm),
#
#    # VMLA (integer) A8-930
#    ('VMLA<c>.8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VMLA<c>.16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VMLA<c>.32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
#
#    ('VMLA<c>.8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
#    ('VMLA<c>.16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
#    ('VMLA<c>.32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
#
#    ('VMLS<c>.8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VMLS<c>.16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VMLS<c>.32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
#
#    ('VMLS<c>.8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
#    ('VMLS<c>.16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
#    ('VMLS<c>.32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
#
#    # A2
#    ('VMLAL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VMLAL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VMLAL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VMLAL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VMLAL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VMLAL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#
#    ('VMLSL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VMLSL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VMLSL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VMLSL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VMLSL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VMLSL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#
    # VMLA/VMLS (floating-point) A8-932
    ('VMLA<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 1, Dm),
    ('VMLA<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 1, Qm),

    ('VMLS<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 1, Dm),
    ('VMLS<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 1, Qm),
# 
#    # VMLA (by scalar) A8-934
#    ('VMLA<c>.I16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 1, M, 0, Dm),
#    ('VMLA<c>.I32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 1, M, 0, Dm),
#    ('VMLA<c>.F32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 1, M, 0, Dm),
#
#    ('VMLA<c>.I16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Dm),
#    ('VMLA<c>.I32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Dm),
#    ('VMLA<c>.F32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Dm),
#
#    ('VMLS<c>.I16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 1, M, 0, Dm),
#    ('VMLS<c>.I32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 1, M, 0, Dm),
#    ('VMLS<c>.F32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 1, M, 0, Dm),
#
#    ('VMLS<c>.I16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Dm),
#    ('VMLS<c>.I32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Dm),
#    ('VMLS<c>.F32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Dm),
#
#    # enc A2
#    ('VMLAL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 0, N, 1, M, 0, Dm),
#    ('VMLAL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 0, N, 1, M, 0, Dm),
#    ('VMLAL<c>.U16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 0, N, 1, M, 0, Dm),
#    ('VMLAL<c>.U32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 0, N, 1, M, 0, Dm),
#
#    ('VMLSL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 0, N, 1, M, 0, Dm),
#    ('VMLSL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 0, N, 1, M, 0, Dm),
#    ('VMLSL<c>.U16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 0, N, 1, M, 0, Dm),
#    ('VMLSL<c>.U32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 0, N, 1, M, 0, Dm),
#
#    # VMOV (immediate) A8-936
#    #FIXME figure out cmode ('VMOV<c>.dt <Dd>, #<imm>', 1, 1, 1, 1, 0, 0, 1, i, 1, D, 0, 0, 0, imm3, Dd, cmode, 0, Q, op, 1, imm4),
#
#    # VMOV (register) A8-938 FIXME differentiate between VORR (register). M == M, Dm == Dm
#    #('VMOV<c> <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dm, Dd, 0, 0, 0, 1, M, 0, M, 1, Dm),
#    #('VMOV<c> <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dm, Qd, 0, 0, 0, 1, M, 1, M, 1, Dm),
#
#    # VMOV (arm core register to scalar) A8-940 FIXME extract index and size from opc1:opc2
#    #('VMOV<c> <Dd[x]>, <Rt>', cond, 1, 1, 1, 0, 0, opc1, 0, Dd, Rt, 1, 0, 1, 1, D, opc2, 1, (0), (0), (0), (0)),
#    #('VMOV<c>.8  <Dd[x]>, <Rt>', cond, 1, 1, 1, 0, 0, opc1, 0, Dd, Rt, 1, 0, 1, 1, D, opc2, 1, (0), (0), (0), (0)),
#    #('VMOV<c>.16 <Dd[x]>, <Rt>', cond, 1, 1, 1, 0, 0, opc1, 0, Dd, Rt, 1, 0, 1, 1, D, opc2, 1, (0), (0), (0), (0)),
#    #('VMOV<c>.32 <Dd[x]>, <Rt>', cond, 1, 1, 1, 0, 0, opc1, 0, Dd, Rt, 1, 0, 1, 1, D, opc2, 1, (0), (0), (0), (0)),
#
#    # VMOV (scalar to arm core register) A8-942 FIXME extract index and size from opc1:opc2
#    #('VMOV<c>.dt <Rt>, <Dn[x]>', cond, 1, 1, 1, 0, U, opc1, 1, Dn, Rt, 1, 0, 1, 1, N, opc2, 1, (0), (0), (0), (0)),
#
#    # VMOV ( between two arm core registers and a doubleword extension register) A8-948
#    ('VMOV<c> <Dm>, <Rt>, <Rt2>', cond, 1, 1, 0, 0, 0, 1, 0, 0, Rt2, Rt, 1, 0, 1, 1, 0, 0, M, 1, Dm),
#    ('VMOV<c> <Rt>, <Rt2>, <Dm>', cond, 1, 1, 0, 0, 0, 1, 0, 1, Rt2, Rt, 1, 0, 1, 1, 0, 0, M, 1, Dm),
#
#    # VMOVL A8-950
#    ('VMOVL<c>.S8  <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, 1, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
#    ('VMOVL<c>.S16 <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, 0, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
#    ('VMOVL<c>.S32 <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, 0, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
#    ('VMOVL<c>.U8  <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, 1, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
#    ('VMOVL<c>.U16 <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, 0, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
#    ('VMOVL<c>.U32 <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, 0, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
#
#    # VMOVN A8-952
#    ('VMOVN<c>.I16 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Qm),
#    ('VMOVN<c>.I32 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Qm),
#    ('VMOVN<c>.I64 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Qm),
#
    # VMRS A8-954
    #('VMRS<c> <Rt>, FPSID', cond, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
    ('VMRS<c> <Rt>, FPSCR', 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
    #('VMRS<c> <Rt>, MVFR1', cond, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)), FIXME include these or no?
    #('VMRS<c> <Rt>, MVFR0', cond, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
    #('VMRS<c> <Rt>, FPEXC', cond, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
#
#    # VMSR A8-956
#    ('VMSR<c> FPSCR, <Rt>', cond, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
#    #('VMSR<c> FPSID, <Rt>', cond, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
#    #('VMSR<c> FPEXC, <Rt>', cond, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
#
#    # VMUL A8-958
#    ('VMUL<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VMUL<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VMUL<c>.I32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VMUL<c>.P8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 1, Dm),
#
#    ('VMUL<c>.I8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 1, Qm),
#    ('VMUL<c>.I16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 1, N, 1, M, 1, Qm),
#    ('VMUL<c>.I32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 1, Qm),
#    ('VMUL<c>.P8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 1, Qm),
#
#    # enc A2
#    ('VMULL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VMULL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VMULL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
#
#    ('VMULL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VMULL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VMULL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
#
#    ('VMULL<c>.P8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 1, 1, 1, 0, N, 0, M, 0, Dm),
#
#    # VMUL (floating-point) A8-960
#    ('VMUL<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 1, Dm),
#    ('VMUL<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 1, Qm),
#
#    # VMUL (by scalar) A8-962
#    ('VMUL<c>.I16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 1, M, 0, Dm),
#    ('VMUL<c>.I32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 1, 0, 0, 0, N, 1, M, 0, Dm),
#    ('VMUL<c>.F32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 1, 0, 0, 1, N, 1, M, 0, Dm),
#
#    ('VMUL<c>.I16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Dm),
#    ('VMUL<c>.I32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Dm),
#    ('VMUL<c>.F32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Dm),
#
#    # enc A2
#    ('VMULL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 0, N, 1, M, 0, Dm),
#    ('VMULL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 0, N, 1, M, 0, Dm),
#    ('VMULL<c>.U16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 0, N, 1, M, 0, Dm),
#    ('VMULL<c>.U32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 0, N, 1, M, 0, Dm),
#
#    # VMVN (immediate) A8-964
#    #('VMVN<c>.dt <Dd>, #<imm>', 1, 1, 1, 1, 0, 0, 1, i, 1, D, 0, 0, 0, imm3, Dd, cmode, 0, Q, 1, 1, imm4), FIXME cmode
#
#    # VMVN (register) A8-966
#    ('VMVN<c> <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 0, 1, 1, 0, M, 0, Dm),
#    ('VMVN<c> <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 0, 1, 1, 1, M, 0, Qm),
#
#    # VNEG A8-968
#    ('VNEG<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 1, 1, 1, 0, M, 0, Dm),
#    ('VNEG<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 1, 1, 1, 0, M, 0, Dm),
#    ('VNEG<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 1, 1, 1, 0, M, 0, Dm),
#    ('VNEG<c>.F32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),
#
#    ('VNEG<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 1, 1, 1, 1, M, 0, Qm),
#    ('VNEG<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 1, 1, 1, 1, M, 0, Qm),
#    ('VNEG<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 1, 1, 1, 1, M, 0, Qm),
#    ('VNEG<c>.F32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),
#
#    # VORN (register) A8-972
#    ('VORN<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VORN<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),
#
#    # VORR (immediate) A8-974
#    #('VORR<c>.dt <Dd>, #<imm>', 1, 1, 1, 1, 0, 0, 1, i, 1, D, 0, 0, 0, imm3, Dd, cmode, 0, 0, 0, 1, imm4),
#    #('VORR<c>.dt <Qd>, #<imm>', 1, 1, 1, 1, 0, 0, 1, i, 1, D, 0, 0, 0, imm3, Qd, cmode, 0, 1, 0, 1, imm4), FIXME cmode
#
#    # VORR (register) A8-976
#    ('VORR<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
#    ('VORR<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),
#
#    # VPADAL A8-978
#    ('VPADAL<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),
#    ('VPADAL<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),
#    ('VPADAL<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),
#    ('VPADAL<c>.U8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 1, 0, 1, 0, M, 0, Dm),
#    ('VPADAL<c>.U16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 1, 0, 1, 0, M, 0, Dm),
#    ('VPADAL<c>.U32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 1, 0, 1, 0, M, 0, Dm),
#
#    ('VPADAL<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),
#    ('VPADAL<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),
#    ('VPADAL<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),
#    ('VPADAL<c>.U8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 1, 0, 1, 1, M, 0, Qm),
#    ('VPADAL<c>.U16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 1, 0, 1, 1, M, 0, Qm),
#    ('VPADAL<c>.U32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 1, 0, 1, 1, M, 0, Qm),
#
#    # VPADD (integer) A8-980
#    ('VPADD<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 1, N, 0, M, 1, Dm),
#    ('VPADD<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 1, N, 0, M, 1, Dm),
#    ('VPADD<c>.I32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 1, N, 0, M, 1, Dm),
#
#    # VPADD (floating-point) A8-982
#    ('VPADD<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 0, Dm),
#
#    # VPADDL A8-984
#    ('VPADDL<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
#    ('VPADDL<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
#    ('VPADDL<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
#    ('VPADDL<c>.U8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Dm),
#    ('VPADDL<c>.U16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Dm),
#    ('VPADDL<c>.U32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Dm),
#
#    ('VPADDL<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
#    ('VPADDL<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
#    ('VPADDL<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
#    ('VPADDL<c>.U8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
#    ('VPADDL<c>.U16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
#    ('VPADDL<c>.U32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
#
#    # VPMAX/MIN A8-986
#    ('VPMAX<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VPMAX<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VPMAX<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VPMAX<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VPMAX<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VPMAX<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#
#    ('VPMAX<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VPMAX<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VPMAX<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VPMAX<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VPMAX<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
#    ('VPMAX<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
#
#    ('VPMIN<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VPMIN<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VPMIN<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VPMIN<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VPMIN<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VPMIN<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
#
#    ('VPMIN<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VPMIN<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VPMIN<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VPMIN<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VPMIN<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VPMIN<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
#
#    # VPMAX/MIN (floating-point) A8-988
#    ('VPMAX<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 0, Dm),
#    ('VPMIN<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 0, Dm),
#
    # VPOP A8-990
    ('VPOP<c>.64 <list>', 1, 1, 1, 0, 1, 1, 0, 0, 1, D, 1, 1, 1, 1, 0, 1, Dd, 1, 0, 1, 1, imm8), # FIXME imm 8 indicates how many regs

    # VPUSH A8-992
    ('VPUSH<c>.64 <list>', 1, 1, 1, 0, 1, 1, 0, 1, 0, D, 1, 0, 1, 1, 0, 1, Dd, 1, 0, 1, 1, imm8), # FIXME
#
#    # VQABS A8-994
#    ('VQABS<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),
#    ('VQABS<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),
#    ('VQABS<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),
#
#    ('VQABS<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),
#    ('VQABS<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),
#    ('VQABS<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),
#
#    # VQADD A8-996
#    ('VQADD<d>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VQADD<d>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VQADD<d>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VQADD<d>.S64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VQADD<d>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VQADD<d>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VQADD<d>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VQADD<d>.U64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
#
#    ('VQADD<d>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VQADD<d>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VQADD<d>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VQADD<d>.S64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VQADD<d>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VQADD<d>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VQADD<d>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VQADD<d>.U64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
#
#    # VQDMLAL/VQDMLSL A8-998
#    ('VQDMLAL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VQDMLAL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 0, 1, N, 0, M, 0, Dm),
#
#    ('VQDMLSL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VQDMLSL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 1, N, 0, M, 0, Dm),
#
#    # enc A2
#    ('VQDMLAL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 1, N, 1, M, 0, Dm),
#    ('VQDMLAL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 1, N, 1, M, 0, Dm),
#
#    ('VQDMLSL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 1, N, 1, M, 0, Dm),
#    ('VQDMLSL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 1, N, 1, M, 0, Dm),
#
#    # VQDMULH A8-1000
#    ('VQDMULH<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VQDMULH<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),
#
#    ('VQDMULH<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 1, N, 1, M, 0, Qm),
#    ('VQDMULH<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 1, N, 1, M, 0, Qm),
#
#    # enc A2
#    ('VQDMULH<c>.S16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 1, 1, 0, 0, N, 1, M, 0, Dm),
#    ('VQDMULH<c>.S32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 1, 1, 0, 0, N, 1, M, 0, Dm),
#
#    ('VQDMULH<c>.S16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 1, 1, 0, 0, N, 1, M, 0, Qm),
#    ('VQDMULH<c>.S32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 1, 1, 0, 0, N, 1, M, 0, Qm),
#
#    # VQDMULL A8-1002
#    ('VQDMULL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VQDMULL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 1, 0, 1, N, 0, M, 0, Dm),
#
#    ('VQDMULL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 1, N, 1, M, 0, Dm),
#    ('VQDMULL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 1, N, 1, M, 0, Dm),
#
#    # VQMOVN A8-1004
#    ('VQMOVN<c>.S16 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Qm),
#    ('VQMOVN<c>.S32 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Qm),
#    ('VQMOVN<c>.S64 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Qm),
#
#    ('VQMOVN<c>.U16 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
#    ('VQMOVN<c>.U32 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
#    ('VQMOVN<c>.U64 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
#
#    ('VQMOVUN<c>.S16 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
#    ('VQMOVUN<c>.S32 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
#    ('VQMOVUN<c>.S64 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
#
#    # VQNEG A8-1006
#    ('VQNEG<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),
#    ('VQNEG<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),
#    ('VQNEG<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),
#
#    ('VQNEG<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),
#    ('VQNEG<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),
#    ('VQNEG<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),
#
#    # VQRDMULH A8-1008
#    ('VQRDMULH<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VQRDMULH<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),
#    
#    ('VQRDMULH<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 1, N, 1, M, 0, Qm),
#    ('VQRDMULH<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 1, N, 1, M, 0, Qm),
# 
#    ('VQRDMULH<c>.S16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 1, 1, 0, 1, N, 1, M, 0, Dm),
#    ('VQRDMULH<c>.S32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 1, 1, 0, 1, N, 1, M, 0, Dm),
#
#    ('VQRDMULH<c>.S16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Dm),
#    ('VQRDMULH<c>.S32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Dm),
#
#    # VQRSHL A8-1010
#    ('VQRSHL<c>.S8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
#    ('VQRSHL<c>.S16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
#    ('VQRSHL<c>.S32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
#    ('VQRSHL<c>.S64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
#    ('VQRSHL<c>.U8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
#    ('VQRSHL<c>.U16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
#    ('VQRSHL<c>.U32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
#    ('VQRSHL<c>.U64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
#
#    ('VQRSHL<c>.S8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
#    ('VQRSHL<c>.S16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
#    ('VQRSHL<c>.S32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
#    ('VQRSHL<c>.S64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
#    ('VQRSHL<c>.U8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
#    ('VQRSHL<c>.U16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
#    ('VQRSHL<c>.U32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
#    ('VQRSHL<c>.U64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
#
#    # VQRSHRN A8-1012
#    #('VQRSHRN<c>.S16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm), FIXME size encoded in imm6
#    #('VQRSHRN<c>.S32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),
#    #('VQRSHRN<c>.S64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),
#
#    #('VQRSHRN<c>.U16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),
#    #('VQRSHRN<c>.U32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),
#    #('VQRSHRN<c>.U64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),
#
#    #('VQRSHRUN<c>.S16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
#    #('VQRSHRUN<c>.S32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
#    #('VQRSHRUN<c>.S64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
#
#   # VQSHL A8-1014
#   ('VQSHL<c>.S8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
#   ('VQSHL<c>.S16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
#   ('VQSHL<c>.S32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
#   ('VQSHL<c>.S64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
#
#   ('VQSHL<c>.U8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
#   ('VQSHL<c>.U16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
#   ('VQSHL<c>.U32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
#   ('VQSHL<c>.U64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
#
#   ('VQSHL<c>.S8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
#   ('VQSHL<c>.S16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
#   ('VQSHL<c>.S32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
#   ('VQSHL<c>.S64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
#
#   ('VQSHL<c>.U8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
#   ('VQSHL<c>.U16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
#   ('VQSHL<c>.U32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
#   ('VQSHL<c>.U64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
#
#   # VQSHL (immediate) A8-1016
#   #('VQSHL<c>.S8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm), FIXME size encoded in imm
#   #('VQSHL<c>.S16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
#   #('VQSHL<c>.S32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
#   #('VQSHL<c>.S64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
#
#   #('VQSHL<c>.U8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
#   #('VQSHL<c>.U16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
#   #('VQSHL<c>.U32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
#   #('VQSHL<c>.U64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
#
#   #('VQSHLU<c>.S8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 0, L, 0, M, 1, Dm),
#   #('VQSHLU<c>.S16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 0, L, 0, M, 1, Dm),
#   #('VQSHLU<c>.S32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 0, L, 0, M, 1, Dm),
#   #('VQSHLU<c>.S64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 0, L, 0, M, 1, Dm),
#
#   #('VQSHL<c>.S8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
#   #('VQSHL<c>.S16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
#   #('VQSHL<c>.S32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
#   #('VQSHL<c>.S64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
#
#   #('VQSHL<c>.U8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
#   #('VQSHL<c>.U16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
#   #('VQSHL<c>.U32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
#   #('VQSHL<c>.U64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
#
#   #('VQSHLU<c>.S8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 0, L, 1, M, 1, Qm),
#   #('VQSHLU<c>.S16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 0, L, 1, M, 1, Qm),
#   #('VQSHLU<c>.S32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 0, L, 1, M, 1, Qm),
#   #('VQSHLU<c>.S64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 0, L, 1, M, 1, Qm),
#
#   # VQSHRN A8-1018 FIXME size encoded in imm6
#   #('VQSHRN<c>.S16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
#   #('VQSHRN<c>.S32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
#   #('VQSHRN<c>.S64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
#
#   #('VQSHRN<c>.U16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
#   #('VQSHRN<c>.U32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
#   #('VQSHRN<c>.U64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
#
#   #('VQSHRUN<c>.S16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 0, M, 1, Qm),
#   #('VQSHRUN<c>.S32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 0, M, 1, Qm),
#   #('VQSHRUN<c>.S64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 0, M, 1, Qm),
#
#    # VQSUB A8-1020
#    ('VQSUB<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VQSUB<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VQSUB<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VQSUB<c>.S64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
#
#    ('VQSUB<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VQSUB<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VQSUB<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
#    ('VQSUB<c>.U64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
#
#    ('VQSUB<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VQSUB<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VQSUB<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VQSUB<c>.S64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
#
#    ('VQSUB<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VQSUB<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VQSUB<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
#    ('VQSUB<c>.U64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
#
#    # VRADDHN A8-1022
#    ('VRADDHN<c>.I16 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
#    ('VRADDHN<c>.I32 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
#    ('VRADDHN<c>.I64 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
#
#    # VRECPE A8-1024
#    ('VRECPE<c>.U32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),
#    ('VRECPE<c>.F32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 0, 1, 0, 0, M, 0, Dm),
#
#    ('VRECPE<c>.U32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),
#    ('VRECPE<c>.F32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 0, 1, 0, 1, M, 0, Qm),
#
#    # VRECPS A8-1026
#    ('VRECPS<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 1, Dm),
#    ('VRECPS<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 1, 1, 1, N, 1, M, 1, Qm),
#
#    # VREV A8-1028
#    ('VREV16<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
#
#    ('VREV32<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
#    ('VREV32<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
#
#    ('VREV64<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
#    ('VREV64<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
#    ('VREV64<c>.32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
#
#    ('VREV16<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
#
#    ('VREV32<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
#    ('VREV32<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
#
#    ('VREV64<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
#    ('VREV64<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
#    ('VREV64<c>.32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
#
#    # VRHADD A8-1030
#    ('VRHADD<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VRHADD<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VRHADD<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VRHADD<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VRHADD<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VRHADD<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
#
#    ('VRHADD<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
#    ('VRHADD<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
#    ('VRHADD<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
#    ('VRHADD<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
#    ('VRHADD<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
#    ('VRHADD<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
#
#    # VRSHL A8-1032
#    ('VRSHL<c>.S8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VRSHL<c>.S16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VRSHL<c>.S32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VRSHL<c>.S64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#
#    ('VRSHL<c>.U8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VRSHL<c>.U16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VRSHL<c>.U32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#    ('VRSHL<c>.U64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
#
#    ('VRSHL<c>.S8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
#    ('VRSHL<c>.S16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
#    ('VRSHL<c>.S32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
#    ('VRSHL<c>.S64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
#
#    ('VRSHL<c>.U8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
#    ('VRSHL<c>.U16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
#    ('VRSHL<c>.U32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
#    ('VRSHL<c>.U64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
#
#    # VRSHR A8-1034 FIXME size encoded in imm
#    #('VRSHR<c>.S8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
#    #('VRSHR<c>.S16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
#    #('VRSHR<c>.S32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
#    #('VRSHR<c>.S64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
#
#    #('VRSHR<c>.U8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
#    #('VRSHR<c>.U16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
#    #('VRSHR<c>.U32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
#    #('VRSHR<c>.U64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
#
#    #('VRSHR<c>.S8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
#    #('VRSHR<c>.S16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
#    #('VRSHR<c>.S32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
#    #('VRSHR<c>.S64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
#
#    #('VRSHR<c>.U8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
#    #('VRSHR<c>.U16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
#    #('VRSHR<c>.U32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
#    #('VRSHR<c>.U64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
#
#    # VRSHRN A8-1036 FIXME size encoded in imm6
#    #('VRSHRN<c>.I16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
#    #('VRSHRN<c>.I32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
#    #('VRSHRN<c>.I64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
#
#    # VRSQRTE A8-1038
#    ('VRSQRTE<c>.U32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),
#    ('VRSQRTE<c>.F32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 0, 1, 1, 0, M, 0, Dm),
#
#    ('VRSQRTE<c>.U32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),
#    ('VRSQRTE<c>.F32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 0, 1, 1, 1, M, 0, Qm),
#
#    # VRSQRTS A8-1040
#    ('VRSQRTS<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 1, Dm),
#    ('VRSQRTS<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 1, 1, 1, N, 1, M, 1, Qm),
#
#    # VRSRA A8-1042 FIXME size encded in imm
#    #('VRSRA<c>.S8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
#    #('VRSRA<c>.S16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
#    #('VRSRA<c>.S32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
#    #('VRSRA<c>.S64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
#
#    #('VRSRA<c>.U8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
#    #('VRSRA<c>.U16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
#    #('VRSRA<c>.U32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
#    #('VRSRA<c>.U64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
#
#    #('VRSRA<c>.S8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
#    #('VRSRA<c>.S16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
#    #('VRSRA<c>.S32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
#    #('VRSRA<c>.S64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
#
#    #('VRSRA<c>.U8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
#    #('VRSRA<c>.U16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
#    #('VRSRA<c>.U32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
#    #('VRSRA<c>.U64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
#
#    # VRSUBHN A8-1044
#    ('VRSUBHN<c>.I16 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
#    ('VRSUBHN<c>.I32 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
#    ('VRSUBHN<c>.I64 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
#
#    # VSHL (immediate) A8-1046 FIXME size encoded in imm6
#    #('VSHL<c>.I8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 0, 1, L, 0, M, 1, Dm),
#    #('VSHL<c>.I16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 0, 1, L, 0, M, 1, Dm),
#    #('VSHL<c>.I32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 0, 1, L, 0, M, 1, Dm),
#    #('VSHL<c>.I64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 0, 1, L, 0, M, 1, Dm),
#
#    #('VSHL<c>.I8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 0, 1, L, 1, M, 1, Qm),
#    #('VSHL<c>.I16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 0, 1, L, 1, M, 1, Qm),
#    #('VSHL<c>.I32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 0, 1, L, 1, M, 1, Qm),
#    #('VSHL<c>.I64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 0, 1, L, 1, M, 1, Qm),
#
#    # VSHL (register) A8-1048
#    ('VSHL<c>.S8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VSHL<c>.S16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VSHL<c>.S32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VSHL<c>.S64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
#
#    ('VSHL<c>.U8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VSHL<c>.U16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VSHL<c>.U32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
#    ('VSHL<c>.U64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
#
#    ('VSHL<c>.S8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
#    ('VSHL<c>.S16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
#    ('VSHL<c>.S32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
#    ('VSHL<c>.S64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
#
#    ('VSHL<c>.U8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
#    ('VSHL<c>.U16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
#    ('VSHL<c>.U32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
#    ('VSHL<c>.U64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
#
#    # VSHLL A8-1050
#    #('VSHLL<c>.dt <Qd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, U, 1, D, imm6, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm), FIXME size encoded in imm6
#
#    # VSHR A8-1052
#    #('VSHR<c>.dt <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, U, 1, D, imm6, Dd, 0, 0, 0, 0, L, Q, M, 1, Dm), FIXME size encoded in imm6
#
#    # VSHRN A8-1054
#    #('VSHRN<c>.dt <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 0, M, 1, Qm), FIXME size encoded in imm6
#
#    # VSLI A8-1056
#    #('VSLI<c>.dt <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 0, 1, L, Q, M, 1, Dm), FIXME size encoded in imm6
#
#    # VSRA A8-1060
#    #('VSRA<c>.dt <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, U, 1, D, imm6, Dd, 0, 0, 0, 1, L, Q, M, 1, Dm), FIXME size encoded in imm6
#
#    # VSRI A8-1062
#    #('VSRI<c>.dt <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 0, 0, L, Q, M, 1, Dm), FIXME size encoded in imm6
#
#    # VST1 (multiple single elements) A8-1064
#    ('VST1<c>.8  <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),
#
#    ('VST1<c>.8  <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1),
#
#    ('VST1<c>.8  <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1),
#
#    ('VST1<c>.8  <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1),
#
#    ('VST1<c>.8  <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, Rm),
#    ('VST1<c>.16 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, Rm),
#    ('VST1<c>.32 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, Rm),
#    ('VST1<c>.64 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, Rm),
#
#    ('VST1<c>.8  <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, Rm),
#    ('VST1<c>.16 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, Rm),
#    ('VST1<c>.32 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, Rm),
#    ('VST1<c>.64 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, Rm),
#
##
#    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1),
#
###
#    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1),
###
#    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, Rm),
#    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, Rm),
#    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, Rm),
#    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, Rm),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, Rm),
#    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, Rm),
#    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, Rm),
#    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, Rm),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, Rm),
#    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, Rm),
#    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, Rm),
#    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, Rm),
##
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, Rm),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, Rm),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, Rm),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, Rm),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, Rm),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, Rm),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, Rm),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, Rm),
#
##
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1),
###
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1),
###
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, Rm),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, Rm),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, Rm),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, Rm),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, Rm),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, Rm),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, Rm),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, Rm),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, Rm),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, Rm),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, Rm),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, Rm),
#
#    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, Rm),
#    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, Rm),
#    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, Rm),
#    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, Rm),
#
#    # VST1 (single element from 1 lane) A8-1066
#    # FIXME index_align
#
#    # VST2 (multiple 2-element structures) A8-1068
#    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),
###
#    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),
###
#    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, Rm),
#
#    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, Rm),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, Rm),
#
##
#    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),
###
#    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#
###
#    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, Rm),
#
#    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, Rm),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, Rm),
##
#    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1),
###
#    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1),
#
###
#    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, Rm),
#
#    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, Rm),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, Rm),
#
#
##
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1),
#
#    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, Rm),
#    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, Rm),
#    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, Rm),
#
#    # VST2 (single 2-element structure from one lane) A8-1070
#    # FIXME index_align
#
#    # VST3 (multiple 3-element structures) A8-1072
#    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
###
#    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
###
#    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, Rm),
#    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, Rm),
#    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, Rm),
#
#    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, Rm),
#    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, Rm),
#    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, Rm),
#
#    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, Rm),
#    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, Rm),
#    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, Rm),
#
#    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, Rm),
#    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, Rm),
#    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, Rm),
#
#    # VST3 (single 3-element structure from one lane) A8-1074
#    # FIXME index_align
#
#    # VST4 (multiple 4-element structures) A8-1076
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
##
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),
##
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, Rm),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, Rm),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, Rm),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, Rm),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, Rm),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, Rm),
###
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
##
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
##
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, Rm),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, Rm),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, Rm),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, Rm),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, Rm),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, Rm),
###
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),
##
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),
##
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, Rm),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, Rm),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, Rm),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, Rm),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, Rm),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, Rm),
###
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1),
##
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1),
##
#    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, Rm),
#    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, Rm),
#    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, Rm),
#
#    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, Rm),
#    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, Rm),
#    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, Rm),
#
#    # VST4 (single 4-elmement structure from one lane) A8-1078
#    # FIXME index_align

    # VSTM A8-1080 FIXME imm8 specifies register list
    ('VSTMIA<c>.64 <Rn>, <list>',  1, 1, 1, 0, 1, 1, 0, 0, 1, D, 0, 0, Rn, Dd, 1, 0, 1, 1, imm8),
    ('VSTMIA<c>.64 <Rn>!, <list>', 1, 1, 1, 0, 1, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 0, 1, 1, imm8),
    ('VSTMDB<c>.64 <Rn>!, <list>', 1, 1, 1, 0, 1, 1, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 1, imm8),

    # VSTR A8-1082
    ('VSTR<c>.64 <Dd>, [<Rn>, #-<imm>]', 1, 1, 1, 0, 1, 1, 0, 1, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 1, imm8),
    ('VSTR<c>.64 <Dd>, [<Rn>, #+<imm>]', 1, 1, 1, 0, 1, 1, 0, 1, 1, D, 0, 0, Rn, Dd, 1, 0, 1, 1, imm8),

    # VSUB (integer) A8-1084
    ('VSUB<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VSUB<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VSUB<c>.I32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VSUB<c>.I64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),

    ('VSUB<c>.I8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
    ('VSUB<c>.I16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
    ('VSUB<c>.I32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
    ('VSUB<c>.I64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 1, 1, 1, 1, 0, D, 1, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
#
#    # VSUB (floating-point) A8-1086
    ('VSUB<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 0, Dm),
    ('VSUB<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 0, 1, 1, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Qm),
#
#    # VSUBHN A8-1088
#    ('VSUBHN<c>.I16 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
#    ('VSUBHN<c>.I32 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
#    ('VSUBHN<c>.I64 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
#
#    # VSUBL A8-1090
#    ('VSUBL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VSUBL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VSUBL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VSUBL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VSUBL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VSUBL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
#
#    ('VSUBW<c>.S8  <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VSUBW<c>.S16 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VSUBW<c>.S32 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VSUBW<c>.U8  <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VSUBW<c>.U16 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VSUBW<c>.U32 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
#
#    # VSWP A8-1092
#    ('VSWP<c> <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
#    ('VSWP<c> <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
#
#    # VTBL A8-1094
#    ('VTBL<c>.8 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
#    ('VTBX<c>.8 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 0, 0, N, 1, M, 0, Dm),
#
#    ('VTBL<c>.8 <Dd>, <Dn>, <Dn+1>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
#    ('VTBX<c>.8 <Dd>, <Dn>, <Dn+1>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 0, 1, N, 1, M, 0, Dm),
#
#    ('VTBL<c>.8 <Dd>, <Dn>, <Dn+1>, <Dn+2>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
#    ('VTBX<c>.8 <Dd>, <Dn>, <Dn+1>, <Dn+2>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 1, 0, N, 1, M, 0, Dm),
#
#    ('VTBL<c>.8 <Dd>, <Dn>, <Dn+1>, <Dn+2>, <Dn+3>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),
#    ('VTBX<c>.8 <Dd>, <Dn>, <Dn+1>, <Dn+2>, <Dn+3>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 1, 1, N, 1, M, 0, Dm),
#
#    # VTRN A8-1096
#    ('VTRN<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
#    ('VTRN<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
#    ('VTRN<c>.32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
#
#    ('VTRN<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
#    ('VTRN<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
#    ('VTRN<c>.32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
#
#    # VTST A8-1098
#    ('VTST<c>.8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VTST<c>.16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),
#    ('VTST<c>.32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),
#
#    ('VTST<c>.8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VTST<c>.16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),
#    ('VTST<c>.32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),
#
#    # VUZP A8-1100
#    ('VUZP<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
#    ('VUZP<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
#
#    ('VUZP<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
#    ('VUZP<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
#    ('VUZP<c>.32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
#
#    # VZIP A8-1102
#    ('VZIP<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),
#    ('VZIP<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),
#
#    ('VZIP<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
#    ('VZIP<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
#    ('VZIP<c>.32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm)



#
]

armneon = [
    ('VABA<c>.S8 <Dd>, <Dn>, <Dm>',  1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
    ('VABA<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
    ('VABA<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
    ('VABA<c>.U8 <Dd>, <Dn>, <Dm>',  1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
    ('VABA<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),
    ('VABA<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 1, Dm),

    ('VABA<c>.S8 <Qd>, <Qn>, <Qm>',  1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
    ('VABA<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
    ('VABA<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
    ('VABA<c>.U8 <Qd>, <Qn>, <Qm>',  1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
    ('VABA<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),
    ('VABA<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 1, Qm),

    ('VABAL<c>.S8 <Qd>, <Dn>, <Dm>',  1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VABAL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VABAL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VABAL<c>.U8 <Qd>, <Dn>, <Dm>',  1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VABAL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VABAL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 1, 0, 1, N, 0, M, 0, Dm),

    ('VABD<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABD<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABD<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABD<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABD<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABD<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 1, N, 0, M, 0, Dm),

    ('VABD<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 0, Qm),
    ('VABD<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 1, N, 1, M, 0, Qm),
    ('VABD<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 0, Qm),
    ('VABD<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 0, Qm),
    ('VABD<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 1, N, 1, M, 0, Qm),
    ('VABD<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 1, N, 1, M, 0, Qm),

    ('VABDL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABDL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABDL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABDL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABDL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),
    ('VABDL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 1, N, 0, M, 0, Dm),

    ('VABD<c>.F32  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 0, Dm),
    ('VABD<c>.F32  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Qm),

    ('VABS<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 1, 1, 0, 0, M, 0, Dm),
    ('VABS<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 1, 1, 0, 0, M, 0, Dm),
    ('VABS<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 1, 1, 0, 0, M, 0, Dm),
    ('VABS<c>.F32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),

    ('VABS<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 1, 1, 0, 1, M, 0, Qm),
    ('VABS<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 1, 1, 0, 1, M, 0, Qm),
    ('VABS<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 1, 1, 0, 1, M, 0, Qm),
    ('VABS<c>.F32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),

    ('VACGE<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 0, N, 0, M, 1, Dm),
    ('VACGE<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 1, 1, 0, N, 1, M, 1, Qm),

    ('VACGT<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 0, N, 0, M, 1, Dm),
    ('VACGT<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 1, 1, 0, N, 1, M, 1, Qm),

    ('VADD<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VADD<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VADD<c>.I32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VADD<c>.I64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),

    ('VADD<c>.I8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
    ('VADD<c>.I16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
    ('VADD<c>.I32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
    ('VADD<c>.I64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),

    ('VADD<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 0, Dm),
    ('VADD<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Qm),

    ('VADDHN<c>.I16 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
    ('VADDHN<c>.I32 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
    ('VADDHN<c>.I64 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),

    ('VADDL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VADDL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VADDL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VADDL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VADDL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VADDL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 0, 0, 0, N, 0, M, 0, Dm),

    ('VADDW<c>.S8  <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VADDW<c>.S16 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VADDW<c>.S32 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VADDW<c>.U8  <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VADDW<c>.U16 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VADDW<c>.U32 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 0, M, 0, Dm),

    ('VAND<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
    ('VAND<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),

    # TODO VBIC imm figure out cmode

    ('VBIC<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
    ('VBIC<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),

    ('VBIF<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
    ('VBIF<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),

    ('VBIT<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
    ('VBIT<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),

    ('VBSL<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
    ('VBSL<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),

    ('VCEQ<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),
    ('VCEQ<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),
    ('VCEQ<c>.I8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),
    ('VCEQ<c>.I16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),

    ('VCEQ<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 0, N, 0, M, 0, Dm),
    ('VCEQ<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 1, 1, 0, N, 1, M, 0, Qm),

    ('VCEQ<c>.I8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
    ('VCEQ<c>.I16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
    ('VCEQ<c>.I32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
    ('VCEQ<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 0, 1, 0, 0, M, 0, Dm),

    ('VCEQ<c>.I8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
    ('VCEQ<c>.I16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
    ('VCEQ<c>.I32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
    ('VCEQ<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 0, 1, 0, 1, M, 0, Qm),

    ('VCGE<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
    ('VCGE<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
    ('VCGE<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
    ('VCGE<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
    ('VCGE<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),
    ('VCGE<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 1, Dm),

    ('VCGE<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
    ('VCGE<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
    ('VCGE<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
    ('VCGE<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
    ('VCGE<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),
    ('VCGE<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 1, Qm),

    ('VCGE<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 0, N, 0, M, 0, Dm),
    ('VCGE<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 1, 1, 0, N, 1, M, 0, Qm),

    ('VCGE<c>.S8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
    ('VCGE<c>.S16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
    ('VCGE<c>.S32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
    ('VCGE<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),

    ('VCGE<c>.S8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
    ('VCGE<c>.S16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
    ('VCGE<c>.S32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
    ('VCGE<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),

    ('VCGT<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VCGT<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VCGT<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VCGT<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VCGT<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VCGT<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 1, N, 0, M, 0, Dm),

    ('VCGT<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
    ('VCGT<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
    ('VCGT<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
    ('VCGT<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
    ('VCGT<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),
    ('VCGT<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 1, M, 0, Qm),

    ('VCGT<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 0, N, 0, M, 0, Dm),
    ('VCGT<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 1, 1, 0, N, 1, M, 0, Qm),

    ('VCGT<c>.S8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
    ('VCGT<c>.S16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
    ('VCGT<c>.S32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
    ('VCGT<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),

    ('VCGT<c>.S8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
    ('VCGT<c>.S16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
    ('VCGT<c>.S32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
    ('VCGT<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),

    ('VCLE<c>.S8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),
    ('VCLE<c>.S16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),
    ('VCLE<c>.S32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),
    ('VCLE<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 0, 1, 1, 0, M, 0, Dm),

    ('VCLE<c>.S8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
    ('VCLE<c>.S16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
    ('VCLE<c>.S32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
    ('VCLE<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 0, 1, 1, 1, M, 0, Qm),

    ('VCLS<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),
    ('VCLS<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),
    ('VCLS<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),

    ('VCLS<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),
    ('VCLS<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),
    ('VCLS<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),

    ('VCLT<c>.S8  <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
    ('VCLT<c>.S16 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
    ('VCLT<c>.S32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
    ('VCLT<c>.F32 <Dd>, <Dm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),

    ('VCLT<c>.S8  <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
    ('VCLT<c>.S16 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
    ('VCLT<c>.S32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
    ('VCLT<c>.F32 <Qd>, <Qm>, #0', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),

    ('VCLZ<c>.I8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),
    ('VCLZ<c>.I16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),
    ('VCLZ<c>.I32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),

    ('VCLZ<c>.I8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),
    ('VCLZ<c>.I16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),
    ('VCLZ<c>.I32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),

    ('VCNT<c>.8 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 0, 1, 0, 0, M, 0, Dm),
    ('VCNT<c>.8 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 0, 1, 0, 1, M, 0, Qm),

    ('VCVT<c>.S32.F32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),
    ('VCVT<c>.U32.F32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),
    ('VCVT<c>.F32.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),
    ('VCVT<c>.F32.U32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 1, 0, 1, 0, M, 0, Dm),

    ('VCVT<c>.S32.F32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),
    ('VCVT<c>.U32.F32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),
    ('VCVT<c>.F32.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),
    ('VCVT<c>.F32.U32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 1, 0, 1, 1, M, 0, Qm),

    ('VCVT<c>.S32.F32 <Dd>, <Dm>, #<fbits>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 1, 1, 1, 0, 0, M, 1, Dm),
    ('VCVT<c>.U32.F32 <Dd>, <Dm>, #<fbits>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 1, 1, 1, 0, 0, M, 1, Dm),
    ('VCVT<c>.F32.S32 <Dd>, <Dm>, #<fbits>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 1, 1, 0, 0, 0, M, 1, Dm),
    ('VCVT<c>.F32.U32 <Dd>, <Dm>, #<fbits>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 1, 1, 0, 0, 0, M, 1, Dm),

    ('VCVT<c>.S32.F32 <Qd>, <Qm>, #<fbits>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 1, 1, 1, 1, 0, 1, M, 1, Qm),
    ('VCVT<c>.U32.F32 <Qd>, <Qm>, #<fbits>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 1, 1, 1, 1, 0, 1, M, 1, Qm),
    ('VCVT<c>.F32.S32 <Qd>, <Qm>, #<fbits>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 1, 1, 1, 0, 0, 1, M, 1, Qm),
    ('VCVT<c>.F32.U32 <Qd>, <Qm>, #<fbits>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 1, 1, 1, 0, 0, 1, M, 1, Qm),

    ('VCVT<c>.F16.F32 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 1, 1, 0, 0, 0, M, 0, Qm),
    ('VCVT<c>.F32.F16 <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Qd, 0, 1, 1, 1, 0, 0, M, 0, Dm),

    #('VDUP<c>.8  <Dd>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, imm4, Dd, 1, 1, 0, 0, 0, 0, M, 0, Dm), FIXME size depends on value of imm4
    #('VDUP<c>.16 <Dd>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, imm4, Dd, 1, 1, 0, 0, 0, 0, M, 0, Dm),
    #('VDUP<c>.32 <Dd>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, imm4, Dd, 1, 1, 0, 0, 0, 0, M, 0, Dm),

    #('VDUP<c>.8  <Qd>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, imm4, Qd, 1, 1, 0, 0, 0, 1, M, 0, Qm), FIXME size depends on value of imm4
    #('VDUP<c>.16 <Qd>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, imm4, Qd, 1, 1, 0, 0, 0, 1, M, 0, Qm),
    #('VDUP<c>.32 <Qd>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, imm4, Qd, 1, 1, 0, 0, 0, 1, M, 0, Qm),

    ('VDUP<c>.8  <Dd>, <Rt>', cond, 1, 1, 1, 0, 1, 1, 0, 0, Dd, Rt, 1, 0, 1, 1, D, 0, 0, 1, (0), (0), (0), (0)),
    ('VDUP<c>.16 <Dd>, <Rt>', cond, 1, 1, 1, 0, 1, 0, 0, 0, Dd, Rt, 1, 0, 1, 1, D, 0, 1, 1, (0), (0), (0), (0)),
    ('VDUP<c>.32 <Dd>, <Rt>', cond, 1, 1, 1, 0, 1, 0, 0, 0, Dd, Rt, 1, 0, 1, 1, D, 0, 0, 1, (0), (0), (0), (0)),

    ('VDUP<c>.8  <Qd>, <Rt>', cond, 1, 1, 1, 0, 1, 1, 1, 0, Qd, Rt, 1, 0, 1, 1, D, 0, 0, 1, (0), (0), (0), (0)),
    ('VDUP<c>.16 <Qd>, <Rt>', cond, 1, 1, 1, 0, 1, 0, 1, 0, Qd, Rt, 1, 0, 1, 1, D, 0, 1, 1, (0), (0), (0), (0)),
    ('VDUP<c>.32 <Qd>, <Rt>', cond, 1, 1, 1, 0, 1, 0, 1, 0, Qd, Rt, 1, 0, 1, 1, D, 0, 0, 1, (0), (0), (0), (0)),

    ('VEOR<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
    ('VEOR<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),

    ('VEXT<c>.8 <Dd>, <Dn>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 1, Dn, Dd, imm4, N, 0, M, 0, Dm),
    ('VEXT<c>.8 <Qd>, <Qn>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 1, Qn, Qd, imm4, N, 1, M, 0, Qm),

    ('VFMA<y><c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 0, N, 0, M, 1, Dm),
    ('VFMA<y><c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 1, 0, 0, N, 1, M, 1, Qm),
    ('VFMS<y><c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 1, 0, 0, N, 0, M, 1, Dm),
    ('VFMS<y><c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 1, 0, 0, N, 1, M, 1, Qm),

    ('VHADD<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VHADD<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VHADD<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VHADD<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VHADD<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),
    ('VHADD<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 0, Dm),

    ('VHADD<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
    ('VHADD<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
    ('VHADD<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
    ('VHADD<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
    ('VHADD<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),
    ('VHADD<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Qm),

    ('VHSUB<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VHSUB<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VHSUB<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VHSUB<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VHSUB<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VHSUB<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 0, Dm),

    ('VHSUB<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
    ('VHSUB<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
    ('VHSUB<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
    ('VHSUB<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
    ('VHSUB<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),
    ('VHSUB<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 0, Qm),

# 1 Reg
  # align = ommitted
    # writeback/Rm
    ('VLD1<c>.8  <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),

    ('VLD1<c>.8  <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1),

    ('VLD1<c>.8  <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, Rm),
    ('VLD1<c>.16 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, Rm),
    ('VLD1<c>.32 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, Rm),
    ('VLD1<c>.64 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, Rm),

  # align = 64
    # writeback/Rm
    ('VLD1<c>.8  <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1),

    ('VLD1<c>.8  <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1),

    ('VLD1<c>.8  <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, Rm),
    ('VLD1<c>.16 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, Rm),
    ('VLD1<c>.32 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, Rm),
    ('VLD1<c>.64 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, Rm),

# 2 reg
  # align = omitted
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),

    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),

    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, Rm),
    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, Rm),
    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, Rm),
    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, Rm),

  # align = 64
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),

    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),

    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, Rm),
    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, Rm),
    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, Rm),
    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, Rm),

  # align = 128
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1),

    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1),

    ('VLD1<c>.8  <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, Rm),
    ('VLD1<c>.16 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, Rm),
    ('VLD1<c>.32 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, Rm),
    ('VLD1<c>.64 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, Rm),

# 3 regs
  # align = omitted
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),

    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),

    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, Rm),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, Rm),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, Rm),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, Rm),

  # align = 64
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),

    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),

    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, Rm),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, Rm),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, Rm),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, Rm),

# 4 regs
  # align = omitted
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, Rm),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, Rm),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, Rm),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, Rm),
  # align = 64
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, Rm),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, Rm),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, Rm),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, Rm),
  # align = 128
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1),
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1),
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, Rm),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, Rm),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, Rm),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, Rm),
  # align = 256
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1),
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1),
    # writeback/Rm
      # size
    ('VLD1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, Rm),
    ('VLD1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, Rm),
    ('VLD1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, Rm),
    ('VLD1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, Rm),

# FIXME A8-901 VLD1 single element to one lane TODO

# single element to all lanes A8-902
    ('VLD1<c>.8  <Dd[]>, [<Rn>]',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd[]>, [<Rn>]',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd[]>, [<Rn>]',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd[]>, [<Rn>:16]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VLD1<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>]',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>]',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>]',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),
    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:16]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1),

    ('VLD1<c>.8  <Dd[]>, [<Rn>]!',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd[]>, [<Rn>]!',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd[]>, [<Rn>]!',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd[]>, [<Rn>:16]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VLD1<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>]!',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>]!',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>]!',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),
    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:16]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1),

    ('VLD1<c>.8  <Dd[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 0, 0, Rm),
    ('VLD1<c>.16 <Dd[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 0, Rm),
    ('VLD1<c>.32 <Dd[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 0, Rm),
    ('VLD1<c>.16 <Dd[]>, [<Rn>:16], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 0, 1, Rm),
    ('VLD1<c>.32 <Dd[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 0, 1, Rm),

    ('VLD1<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 0, 1, 0, Rm),
    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 0, Rm),
    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>',    1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 0, Rm),
    ('VLD1<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:16], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 0, 1, 1, 1, Rm),
    ('VLD1<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 0, 1, 0, 1, 1, Rm),

# A8-904 VLD2 multiple 2-element structures
# align = ommitted
    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, Rm),

    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, Rm),

    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, Rm),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, Rm),

    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, Rm),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, Rm),

    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, Rm),

    ('VLD2<c>.8  <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, Rm),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, Rm),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, Rm),
    ('VLD2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, Rm),
    ('VLD2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, Rm),

# FIXME from here on, instructions need to be copied to thumb table above

    # VLD2 single 2-element structure to one lane A8-906
    # FIXME TODO figure out index_align ('VLD2<c>.size list [<Rn>:align]!, <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, size, 0, 1, index_align, Rm),

    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>:16]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>:16]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1),
#
    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>:16]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>:16]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1),
    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1),
#
    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 0, Rm),
    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 0, Rm),
    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 0, Rm),

    ('VLD2<c>.8  <Dd[]>, <Dd+1[]>, [<Rn>:16], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 0, 1, Rm),
    ('VLD2<c>.16 <Dd[]>, <Dd+1[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 0, 1, Rm),
    ('VLD2<c>.32 <Dd[]>, <Dd+1[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 0, 1, Rm),

    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 0, Rm),
    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 0, Rm),
    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 0, Rm),

    ('VLD2<c>.8  <Dd[]>, <Dd+2[]>, [<Rn>:16], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 0, 1, 1, Rm),
    ('VLD2<c>.16 <Dd[]>, <Dd+2[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 0, 1, 1, 1, Rm),
    ('VLD2<c>.32 <Dd[]>, <Dd+2[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 0, 1, 1, 0, 1, 1, Rm),

    # VLD3 multiple 3-element structures A8-910
# align = omitted
    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#
    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#
    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, Rm),
    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, Rm),
    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, Rm),

    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, Rm),
    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, Rm),
    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, Rm),
# align = 64
    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#
    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#
    ('VLD3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, Rm),
    ('VLD3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, Rm),
    ('VLD3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, Rm),

    ('VLD3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, Rm),
    ('VLD3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, Rm),
    ('VLD3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, Rm),

    # VLD3 single 3-element structure to one lane A8-912
    # FIXME TODO figure out index_align ('VLD3<c>.size <list> [<Rn>:align]!, <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, size, 1, 0, index_align, Rm),

    # VLD3 single 3-element structure to all lanes A8-914
    ('VLD3<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD3<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD3<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VLD3<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD3<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD3<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VLD3<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD3<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD3<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VLD3<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD3<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD3<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VLD3<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 0, 0, Rm),
    ('VLD3<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 0, 0, Rm),
    ('VLD3<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 0, 0, Rm),

    ('VLD3<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 0, 1, 0, Rm),
    ('VLD3<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 0, 1, 1, 0, Rm),
    ('VLD3<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 0, 1, 0, 1, 0, Rm),

    # VLD4 multiple 4-element structures
    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1),

#
    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1),
#
    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, Rm),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, Rm),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, Rm),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, Rm),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, Rm),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, Rm),

    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, Rm),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, Rm),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, Rm),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, Rm),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, Rm),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, Rm),

    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, Rm),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, Rm),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, Rm),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, Rm),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, Rm),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, Rm),

    ('VLD4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, Rm),
    ('VLD4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, Rm),
    ('VLD4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, Rm),

    ('VLD4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, Rm),
    ('VLD4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, Rm),
    ('VLD4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 1, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, Rm),

    # VLD4 single 4-element structure to one lane
    # FIXME TODO ('VLD4<c>.size <list>, [<Rn>:align]!, <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, size, 1, 1, index_align, Rm),

    # VLD4 single 4-element structure to all lanes
# omitted
    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1),
# 32
    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),

    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:32]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
# 64
    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1),
# 128
    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1),

    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),

 # omitted
    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1),
# 32
    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),

    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:32]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1),
# 64
    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1),
# 128
    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1),

    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1),

  # omitted
    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 0, Rm),
    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 0, Rm),
    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 0, Rm),

    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 0, Rm),
    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 0, Rm),
    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 0, Rm),
# 32
    ('VLD4<c>.8  <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 0, 1, Rm),

    ('VLD4<c>.8  <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:32], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 0, 1, 1, Rm),
# 64
    ('VLD4<c>.16 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 0, 1, Rm),
    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 0, 1, Rm),

    ('VLD4<c>.16 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 0, 1, 1, 1, Rm),
    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 0, 1, 1, Rm),
# 128
    ('VLD4<c>.32 <Dd[]>, <Dd+1[]>, <Dd+2[]>, <Dd+3[]>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 0, 1, Rm),

    ('VLD4<c>.32 <Dd[]>, <Dd+2[]>, <Dd+4[]>, <Dd+6[]>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 1, 1, 1, 1, 1, 1, 1, Rm),

    # VLDM A8-922
    ('VLDMIA<c>.64 <Rn>, <list>',  cond, 1, 1, 0, 0, 1, D, 0, 1, Rn, Dd, 1, 0, 1, 1, imm8),
    ('VLDMIA<c>.64 <Rn>!, <list>', cond, 1, 1, 0, 0, 1, D, 1, 1, Rn, Dd, 1, 0, 1, 1, imm8),
    ('VLDMDB<c>.64 <Rn>!, <list>', cond, 1, 1, 0, 1, 0, D, 1, 1, Rn, Dd, 1, 0, 1, 1, imm8),

    # VLDR A8-924
    ('VLDR<c>.64 <Dd>, [<Rn>,#+<imm>]', cond, 1, 1, 0, 1, 1, D, 0, 1, Rn, Dd, 1, 0, 1, 1, imm(8, {'m': 4})),
    ('VLDR<c>.64 <Dd>, [<Rn>,#-<imm>]', cond, 1, 1, 0, 1, 0, D, 0, 1, Rn, Dd, 1, 0, 1, 1, imm(8, {'m': -4})),
    #('VLDR<c> <Dd>, <label>', cond, 1, 1, 0, 1, U, D, 0, 1, Rn, Vd, 1, 0, 1, 1, imm8), FIXME U depends on value of label
    #('VLDR<c> <Dd>, [PC, #-0]', cond, 1, 1, 0, 1, U, D, 0, 1, Rn, Vd, 1, 0, 1, 1, imm8),

    # VMAX/MIN A8-926
    ('VMAX<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
    ('VMAX<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
    ('VMAX<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
    ('VMAX<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
    ('VMAX<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),
    ('VMAX<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 0, Dm),

    ('VMAX<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
    ('VMAX<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
    ('VMAX<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
    ('VMAX<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
    ('VMAX<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),
    ('VMAX<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 0, Qm),

    ('VMIN<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
    ('VMIN<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
    ('VMIN<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
    ('VMIN<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
    ('VMIN<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),
    ('VMIN<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 1, 0, N, 0, M, 1, Dm),

    ('VMIN<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
    ('VMIN<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
    ('VMIN<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
    ('VMIN<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
    ('VMIN<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),
    ('VMIN<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 1, 0, N, 1, M, 1, Qm),

    # VMAX/MIN (floating-point) A8-928
    ('VMAX<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 0, Dm),
    ('VMAX<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 1, 1, 1, N, 1, M, 0, Qm),

    ('VMIN<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 0, Dm),
    ('VMIN<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 1, 1, 1, N, 1, M, 0, Qm),

    # VMLA (integer) A8-930
    ('VMLA<c>.8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
    ('VMLA<c>.16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
    ('VMLA<c>.32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),

    ('VMLA<c>.8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
    ('VMLA<c>.16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
    ('VMLA<c>.32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),

    ('VMLS<c>.8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
    ('VMLS<c>.16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
    ('VMLS<c>.32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),

    ('VMLS<c>.8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
    ('VMLS<c>.16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),
    ('VMLS<c>.32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Qm),

    # A2
    ('VMLAL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VMLAL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VMLAL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VMLAL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VMLAL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VMLAL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 1, 0, 0, 0, N, 0, M, 0, Dm),

    ('VMLSL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VMLSL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VMLSL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VMLSL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VMLSL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VMLSL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 0, N, 0, M, 0, Dm),

    # VMLA/VMLS (floating-point) A8-932
    ('VMLA<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 1, Dm),
    ('VMLA<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 1, Qm),

    ('VMLS<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 1, Dm),
    ('VMLS<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 1, Qm),
 
    # VMLA (by scalar) A8-934
    ('VMLA<c>.I16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 1, M, 0, Dm),
    ('VMLA<c>.I32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 1, M, 0, Dm),
    ('VMLA<c>.F32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 1, M, 0, Dm),

    ('VMLA<c>.I16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Dm),
    ('VMLA<c>.I32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 0, Dm),
    ('VMLA<c>.F32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Dm),

    ('VMLS<c>.I16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 1, M, 0, Dm),
    ('VMLS<c>.I32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 1, M, 0, Dm),
    ('VMLS<c>.F32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 1, M, 0, Dm),

    ('VMLS<c>.I16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Dm),
    ('VMLS<c>.I32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Dm),
    ('VMLS<c>.F32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Dm),

    # enc A2
    ('VMLAL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 0, N, 1, M, 0, Dm),
    ('VMLAL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 0, N, 1, M, 0, Dm),
    ('VMLAL<c>.U16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 0, N, 1, M, 0, Dm),
    ('VMLAL<c>.U32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 0, N, 1, M, 0, Dm),

    ('VMLSL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 0, N, 1, M, 0, Dm),
    ('VMLSL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 0, N, 1, M, 0, Dm),
    ('VMLSL<c>.U16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 0, N, 1, M, 0, Dm),
    ('VMLSL<c>.U32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 0, N, 1, M, 0, Dm),

    # VMOV (immediate) A8-936
    #FIXME figure out cmode ('VMOV<c>.dt <Dd>, #<imm>', 1, 1, 1, 1, 0, 0, 1, i, 1, D, 0, 0, 0, imm3, Dd, cmode, 0, Q, op, 1, imm4),

    # VMOV (register) A8-938 FIXME differentiate between VORR (register). M == M, Dm == Dm
    #('VMOV<c> <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dm, Dd, 0, 0, 0, 1, M, 0, M, 1, Dm),
    #('VMOV<c> <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dm, Qd, 0, 0, 0, 1, M, 1, M, 1, Dm),

    # VMOV (arm core register to scalar) A8-940 FIXME extract index and size from opc1:opc2
    #('VMOV<c> <Dd[x]>, <Rt>', cond, 1, 1, 1, 0, 0, opc1, 0, Dd, Rt, 1, 0, 1, 1, D, opc2, 1, (0), (0), (0), (0)),
    #('VMOV<c>.8  <Dd[x]>, <Rt>', cond, 1, 1, 1, 0, 0, opc1, 0, Dd, Rt, 1, 0, 1, 1, D, opc2, 1, (0), (0), (0), (0)),
    #('VMOV<c>.16 <Dd[x]>, <Rt>', cond, 1, 1, 1, 0, 0, opc1, 0, Dd, Rt, 1, 0, 1, 1, D, opc2, 1, (0), (0), (0), (0)),
    #('VMOV<c>.32 <Dd[x]>, <Rt>', cond, 1, 1, 1, 0, 0, opc1, 0, Dd, Rt, 1, 0, 1, 1, D, opc2, 1, (0), (0), (0), (0)),

    # VMOV (scalar to arm core register) A8-942 FIXME extract index and size from opc1:opc2
    #('VMOV<c>.dt <Rt>, <Dn[x]>', cond, 1, 1, 1, 0, U, opc1, 1, Dn, Rt, 1, 0, 1, 1, N, opc2, 1, (0), (0), (0), (0)),

    # VMOV ( between two arm core registers and a doubleword extension register) A8-948
    ('VMOV<c> <Dm>, <Rt>, <Rt2>', cond, 1, 1, 0, 0, 0, 1, 0, 0, Rt2, Rt, 1, 0, 1, 1, 0, 0, M, 1, Dm),
    ('VMOV<c> <Rt>, <Rt2>, <Dm>', cond, 1, 1, 0, 0, 0, 1, 0, 1, Rt2, Rt, 1, 0, 1, 1, 0, 0, M, 1, Dm),

    # VMOVL A8-950
    ('VMOVL<c>.S8  <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, 1, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
    ('VMOVL<c>.S16 <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, 0, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
    ('VMOVL<c>.S32 <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, 0, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
    ('VMOVL<c>.U8  <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, 1, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
    ('VMOVL<c>.U16 <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, 0, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),
    ('VMOVL<c>.U32 <Qd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, 0, 0, 0, 0, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm),

    # VMOVN A8-952
    ('VMOVN<c>.I16 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Qm),
    ('VMOVN<c>.I32 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Qm),
    ('VMOVN<c>.I64 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Qm),

    # VMRS A8-954
    #('VMRS<c> <Rt>, FPSID', cond, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
    ('VMRS<c> <Rt>, FPSCR', cond, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
    #('VMRS<c> <Rt>, MVFR1', cond, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)), FIXME include these or no?
    #('VMRS<c> <Rt>, MVFR0', cond, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
    #('VMRS<c> <Rt>, FPEXC', cond, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),

    # VMSR A8-956
    ('VMSR<c> FPSCR, <Rt>', cond, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
    #('VMSR<c> FPSID, <Rt>', cond, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),
    #('VMSR<c> FPEXC, <Rt>', cond, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, Rt, 1, 0, 1, 0, (0), (0), (0), 1, (0), (0), (0), (0)),

    # VMUL A8-958
    ('VMUL<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 1, Dm),
    ('VMUL<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 1, N, 0, M, 1, Dm),
    ('VMUL<c>.I32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 1, Dm),
    ('VMUL<c>.P8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 1, N, 0, M, 1, Dm),

    ('VMUL<c>.I8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 1, Qm),
    ('VMUL<c>.I16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 1, N, 1, M, 1, Qm),
    ('VMUL<c>.I32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 1, Qm),
    ('VMUL<c>.P8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 1, Qm),

    # enc A2
    ('VMULL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
    ('VMULL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
    ('VMULL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),

    ('VMULL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
    ('VMULL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),
    ('VMULL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 1, 1, 0, 0, N, 0, M, 0, Dm),

    ('VMULL<c>.P8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 1, 1, 1, 0, N, 0, M, 0, Dm),

    # VMUL (floating-point) A8-960
    ('VMUL<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 1, Dm),
    ('VMUL<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 1, Qm),

    # VMUL (by scalar) A8-962
    ('VMUL<c>.I16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 1, M, 0, Dm),
    ('VMUL<c>.I32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 1, 0, 0, 0, N, 1, M, 0, Dm),
    ('VMUL<c>.F32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 1, 0, 0, 1, N, 1, M, 0, Dm),

    ('VMUL<c>.I16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Dm),
    ('VMUL<c>.I32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Dm),
    ('VMUL<c>.F32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 1, 0, 0, 1, N, 1, M, 0, Dm),

    # enc A2
    ('VMULL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 0, N, 1, M, 0, Dm),
    ('VMULL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 0, N, 1, M, 0, Dm),
    ('VMULL<c>.U16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 0, N, 1, M, 0, Dm),
    ('VMULL<c>.U32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 0, N, 1, M, 0, Dm),

    # VMVN (immediate) A8-964
    #('VMVN<c>.dt <Dd>, #<imm>', 1, 1, 1, 1, 0, 0, 1, i, 1, D, 0, 0, 0, imm3, Dd, cmode, 0, Q, 1, 1, imm4), FIXME cmode

    # VMVN (register) A8-966
    ('VMVN<c> <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 0, 1, 1, 0, M, 0, Dm),
    ('VMVN<c> <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 0, 1, 1, 1, M, 0, Qm),

    # VNEG A8-968
    ('VNEG<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Dd, 0, 0, 1, 1, 1, 0, M, 0, Dm),
    ('VNEG<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Dd, 0, 0, 1, 1, 1, 0, M, 0, Dm),
    ('VNEG<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 0, 1, 1, 1, 0, M, 0, Dm),
    ('VNEG<c>.F32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),

    ('VNEG<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 1, Qd, 0, 0, 1, 1, 1, 1, M, 0, Qm),
    ('VNEG<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 1, Qd, 0, 0, 1, 1, 1, 1, M, 0, Qm),
    ('VNEG<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 0, 1, 1, 1, 1, M, 0, Qm),
    ('VNEG<c>.F32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 1, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),

    # VORN (register) A8-972
    ('VORN<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
    ('VORN<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),

    # VORR (immediate) A8-974
    #('VORR<c>.dt <Dd>, #<imm>', 1, 1, 1, 1, 0, 0, 1, i, 1, D, 0, 0, 0, imm3, Dd, cmode, 0, 0, 0, 1, imm4),
    #('VORR<c>.dt <Qd>, #<imm>', 1, 1, 1, 1, 0, 0, 1, i, 1, D, 0, 0, 0, imm3, Qd, cmode, 0, 1, 0, 1, imm4), FIXME cmode

    # VORR (register) A8-976
    ('VORR<c> <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 1, Dm),
    ('VORR<c> <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 1, Qm),

    # VPADAL A8-978
    ('VPADAL<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),
    ('VPADAL<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),
    ('VPADAL<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 1, 0, 0, 0, M, 0, Dm),
    ('VPADAL<c>.U8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 1, 0, 1, 0, M, 0, Dm),
    ('VPADAL<c>.U16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 1, 0, 1, 0, M, 0, Dm),
    ('VPADAL<c>.U32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 1, 0, 1, 0, M, 0, Dm),

    ('VPADAL<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),
    ('VPADAL<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),
    ('VPADAL<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 1, 0, 0, 1, M, 0, Qm),
    ('VPADAL<c>.U8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 1, 0, 1, 1, M, 0, Qm),
    ('VPADAL<c>.U16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 1, 0, 1, 1, M, 0, Qm),
    ('VPADAL<c>.U32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 1, 0, 1, 1, M, 0, Qm),

    # VPADD (integer) A8-980
    ('VPADD<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 1, N, 0, M, 1, Dm),
    ('VPADD<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 1, N, 0, M, 1, Dm),
    ('VPADD<c>.I32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 1, N, 0, M, 1, Dm),

    # VPADD (floating-point) A8-982
    ('VPADD<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 0, Dm),

    # VPADDL A8-984
    ('VPADDL<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
    ('VPADDL<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
    ('VPADDL<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 0, 1, 0, 0, 0, M, 0, Dm),
    ('VPADDL<c>.U8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Dm),
    ('VPADDL<c>.U16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Dm),
    ('VPADDL<c>.U32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Dm),

    ('VPADDL<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
    ('VPADDL<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
    ('VPADDL<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
    ('VPADDL<c>.U8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
    ('VPADDL<c>.U16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
    ('VPADDL<c>.U32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 0, 1, 0, 1, 1, M, 0, Qm),

    # VPMAX/MIN A8-986
    ('VPMAX<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VPMAX<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VPMAX<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VPMAX<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VPMAX<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VPMAX<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),

    ('VPMAX<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
    ('VPMAX<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
    ('VPMAX<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
    ('VPMAX<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
    ('VPMAX<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),
    ('VPMAX<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 0, Qm),

    ('VPMIN<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
    ('VPMIN<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
    ('VPMIN<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
    ('VPMIN<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
    ('VPMIN<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),
    ('VPMIN<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 0, N, 0, M, 1, Dm),

    ('VPMIN<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
    ('VPMIN<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
    ('VPMIN<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
    ('VPMIN<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
    ('VPMIN<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),
    ('VPMIN<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 0, N, 1, M, 1, Qm),

    # VPMAX/MIN (floating-point) A8-988
    ('VPMAX<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 0, Dm),
    ('VPMIN<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 0, Dm),

    # VPOP A8-990
    ('VPOP<c>.64 <list>', cond, 1, 1, 0, 0, 1, D, 1, 1, 1, 1, 0, 1, Dd, 1, 0, 1, 1, imm8), # FIXME imm 8 indicates how many regs

    # VPUSH A8-992
    ('VPUSH<c>.64 <list>', cond, 1, 1, 0, 1, 0, D, 1, 0, 1, 1, 0, 1, Dd, 1, 0, 1, 1, imm8), # FIXME

    # VQABS A8-994
    ('VQABS<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),
    ('VQABS<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),
    ('VQABS<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 1, 1, 0, 0, M, 0, Dm),

    ('VQABS<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),
    ('VQABS<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),
    ('VQABS<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 1, 1, 0, 1, M, 0, Qm),

    # VQADD A8-996
    ('VQADD<d>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
    ('VQADD<d>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
    ('VQADD<d>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
    ('VQADD<d>.S64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
    ('VQADD<d>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
    ('VQADD<d>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
    ('VQADD<d>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),
    ('VQADD<d>.U64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 0, 0, 0, N, 0, M, 1, Dm),

    ('VQADD<d>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
    ('VQADD<d>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
    ('VQADD<d>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
    ('VQADD<d>.S64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
    ('VQADD<d>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
    ('VQADD<d>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
    ('VQADD<d>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),
    ('VQADD<d>.U64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 0, 0, 0, N, 1, M, 1, Qm),

    # VQDMLAL/VQDMLSL A8-998
    ('VQDMLAL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 0, 1, N, 0, M, 0, Dm),
    ('VQDMLAL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 0, 1, N, 0, M, 0, Dm),

    ('VQDMLSL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 1, N, 0, M, 0, Dm),
    ('VQDMLSL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 1, N, 0, M, 0, Dm),

    # enc A2
    ('VQDMLAL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 1, N, 1, M, 0, Dm),
    ('VQDMLAL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 1, N, 1, M, 0, Dm),

    ('VQDMLSL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 1, 1, 1, N, 1, M, 0, Dm),
    ('VQDMLSL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 1, 1, 1, N, 1, M, 0, Dm),

    # VQDMULH A8-1000
    ('VQDMULH<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),
    ('VQDMULH<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),

    ('VQDMULH<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 1, N, 1, M, 0, Qm),
    ('VQDMULH<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 1, N, 1, M, 0, Qm),

    # enc A2
    ('VQDMULH<c>.S16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 1, 1, 0, 0, N, 1, M, 0, Dm),
    ('VQDMULH<c>.S32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 1, 1, 0, 0, N, 1, M, 0, Dm),

    ('VQDMULH<c>.S16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 1, 1, 0, 0, N, 1, M, 0, Qm),
    ('VQDMULH<c>.S32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 1, 1, 0, 0, N, 1, M, 0, Qm),

    # VQDMULL A8-1002
    ('VQDMULL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 1, 0, 1, N, 0, M, 0, Dm),
    ('VQDMULL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 1, 0, 1, N, 0, M, 0, Dm),

    ('VQDMULL<c>.S16 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 1, 0, 1, 1, N, 1, M, 0, Dm),
    ('VQDMULL<c>.S32 <Qd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 1, 0, 1, 1, N, 1, M, 0, Dm),

    # VQMOVN A8-1004
    ('VQMOVN<c>.S16 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Qm),
    ('VQMOVN<c>.S32 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Qm),
    ('VQMOVN<c>.S64 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 1, 0, 1, 0, M, 0, Qm),

    ('VQMOVN<c>.U16 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
    ('VQMOVN<c>.U32 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 1, 0, 1, 1, M, 0, Qm),
    ('VQMOVN<c>.U64 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 1, 0, 1, 1, M, 0, Qm),

    ('VQMOVUN<c>.S16 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
    ('VQMOVUN<c>.S32 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 1, 0, 0, 1, M, 0, Qm),
    ('VQMOVUN<c>.S64 <Dd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 1, 0, 0, 1, M, 0, Qm),

    # VQNEG A8-1006
    ('VQNEG<c>.S8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),
    ('VQNEG<c>.S16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),
    ('VQNEG<c>.S32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 1, 1, 1, 1, 0, M, 0, Dm),

    ('VQNEG<c>.S8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),
    ('VQNEG<c>.S16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),
    ('VQNEG<c>.S32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 1, 1, 1, 1, 1, M, 0, Qm),

    # VQRDMULH A8-1008
    ('VQRDMULH<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),
    ('VQRDMULH<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),
    
    ('VQRDMULH<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 1, 1, N, 1, M, 0, Qm),
    ('VQRDMULH<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 1, 1, N, 1, M, 0, Qm),
 
    ('VQRDMULH<c>.S16 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Dd, 1, 1, 0, 1, N, 1, M, 0, Dm),
    ('VQRDMULH<c>.S32 <Dd>, <Dn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Dd, 1, 1, 0, 1, N, 1, M, 0, Dm),

    ('VQRDMULH<c>.S16 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Dm),
    ('VQRDMULH<c>.S32 <Qd>, <Qn>, <Dm[x]>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Dm),

    # VQRSHL A8-1010
    ('VQRSHL<c>.S8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
    ('VQRSHL<c>.S16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
    ('VQRSHL<c>.S32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
    ('VQRSHL<c>.S64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
    ('VQRSHL<c>.U8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
    ('VQRSHL<c>.U16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
    ('VQRSHL<c>.U32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),
    ('VQRSHL<c>.U64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 1, Dm),

    ('VQRSHL<c>.S8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
    ('VQRSHL<c>.S16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
    ('VQRSHL<c>.S32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
    ('VQRSHL<c>.S64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
    ('VQRSHL<c>.U8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
    ('VQRSHL<c>.U16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
    ('VQRSHL<c>.U32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),
    ('VQRSHL<c>.U64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 1, Qm),

    # VQRSHRN A8-1012
    #('VQRSHRN<c>.S16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm), FIXME size encoded in imm6
    #('VQRSHRN<c>.S32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),
    #('VQRSHRN<c>.S64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),

    #('VQRSHRN<c>.U16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),
    #('VQRSHRN<c>.U32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),
    #('VQRSHRN<c>.U64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 1, M, 1, Qm),

    #('VQRSHRUN<c>.S16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
    #('VQRSHRUN<c>.S32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
    #('VQRSHRUN<c>.S64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),

   # VQSHL A8-1014
   ('VQSHL<c>.S8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
   ('VQSHL<c>.S16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
   ('VQSHL<c>.S32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
   ('VQSHL<c>.S64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),

   ('VQSHL<c>.U8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
   ('VQSHL<c>.U16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
   ('VQSHL<c>.U32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),
   ('VQSHL<c>.U64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 1, Dm),

   ('VQSHL<c>.S8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
   ('VQSHL<c>.S16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
   ('VQSHL<c>.S32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
   ('VQSHL<c>.S64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),

   ('VQSHL<c>.U8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
   ('VQSHL<c>.U16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
   ('VQSHL<c>.U32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),
   ('VQSHL<c>.U64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 1, Qm),

   # VQSHL (immediate) A8-1016
   #('VQSHL<c>.S8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm), FIXME size encoded in imm
   #('VQSHL<c>.S16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
   #('VQSHL<c>.S32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
   #('VQSHL<c>.S64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),

   #('VQSHL<c>.U8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
   #('VQSHL<c>.U16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
   #('VQSHL<c>.U32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),
   #('VQSHL<c>.U64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 1, L, 0, M, 1, Dm),

   #('VQSHLU<c>.S8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 0, L, 0, M, 1, Dm),
   #('VQSHLU<c>.S16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 0, L, 0, M, 1, Dm),
   #('VQSHLU<c>.S32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 0, L, 0, M, 1, Dm),
   #('VQSHLU<c>.S64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 1, 0, L, 0, M, 1, Dm),

   #('VQSHL<c>.S8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
   #('VQSHL<c>.S16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
   #('VQSHL<c>.S32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
   #('VQSHL<c>.S64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),

   #('VQSHL<c>.U8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
   #('VQSHL<c>.U16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
   #('VQSHL<c>.U32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),
   #('VQSHL<c>.U64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 1, L, 1, M, 1, Qm),

   #('VQSHLU<c>.S8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 0, L, 1, M, 1, Qm),
   #('VQSHLU<c>.S16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 0, L, 1, M, 1, Qm),
   #('VQSHLU<c>.S32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 0, L, 1, M, 1, Qm),
   #('VQSHLU<c>.S64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 1, 1, 0, L, 1, M, 1, Qm),

   # VQSHRN A8-1018 FIXME size encoded in imm6
   #('VQSHRN<c>.S16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
   #('VQSHRN<c>.S32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
   #('VQSHRN<c>.S64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),

   #('VQSHRN<c>.U16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
   #('VQSHRN<c>.U32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),
   #('VQSHRN<c>.U64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 1, 0, 0, M, 1, Qm),

   #('VQSHRUN<c>.S16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 0, M, 1, Qm),
   #('VQSHRUN<c>.S32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 0, M, 1, Qm),
   #('VQSHRUN<c>.S64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 0, M, 1, Qm),

    # VQSUB A8-1020
    ('VQSUB<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
    ('VQSUB<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
    ('VQSUB<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
    ('VQSUB<c>.S64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),

    ('VQSUB<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
    ('VQSUB<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
    ('VQSUB<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),
    ('VQSUB<c>.U64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 0, 1, 0, N, 0, M, 1, Dm),

    ('VQSUB<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
    ('VQSUB<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
    ('VQSUB<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
    ('VQSUB<c>.S64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),

    ('VQSUB<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
    ('VQSUB<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
    ('VQSUB<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),
    ('VQSUB<c>.U64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 0, 1, 0, N, 1, M, 1, Qm),

    # VRADDHN A8-1022
    ('VRADDHN<c>.I16 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
    ('VRADDHN<c>.I32 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),
    ('VRADDHN<c>.I64 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Dd, 0, 1, 0, 0, N, 0, M, 0, Qm),

    # VRECPE A8-1024
    ('VRECPE<c>.U32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 0, 0, 0, 0, M, 0, Dm),
    ('VRECPE<c>.F32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 0, 1, 0, 0, M, 0, Dm),

    ('VRECPE<c>.U32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 0, 0, 0, 1, M, 0, Qm),
    ('VRECPE<c>.F32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 0, 1, 0, 1, M, 0, Qm),

    # VRECPS A8-1026
    ('VRECPS<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 1, Dm),
    ('VRECPS<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 1, 1, 1, N, 1, M, 1, Qm),

    # VREV A8-1028
    ('VREV16<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 0, 1, 0, 0, M, 0, Dm),

    ('VREV32<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
    ('VREV32<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),

    ('VREV64<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
    ('VREV64<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
    ('VREV64<c>.32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),

    ('VREV16<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),

    ('VREV32<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
    ('VREV32<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),

    ('VREV64<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 0, 0, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
    ('VREV64<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 0, 0, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),
    ('VREV64<c>.32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 0, 0, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),

    # VRHADD A8-1030
    ('VRHADD<c>.S8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VRHADD<c>.S16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VRHADD<c>.S32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VRHADD<c>.U8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VRHADD<c>.U16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),
    ('VRHADD<c>.U32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 0, 0, 1, N, 0, M, 0, Dm),

    ('VRHADD<c>.S8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
    ('VRHADD<c>.S16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
    ('VRHADD<c>.S32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
    ('VRHADD<c>.U8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
    ('VRHADD<c>.U16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),
    ('VRHADD<c>.U32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 0, 0, 1, N, 1, M, 0, Qm),

    # VRSHL A8-1032
    ('VRSHL<c>.S8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VRSHL<c>.S16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VRSHL<c>.S32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VRSHL<c>.S64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),

    ('VRSHL<c>.U8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VRSHL<c>.U16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VRSHL<c>.U32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),
    ('VRSHL<c>.U64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 1, N, 0, M, 0, Dm),

    ('VRSHL<c>.S8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
    ('VRSHL<c>.S16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
    ('VRSHL<c>.S32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
    ('VRSHL<c>.S64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),

    ('VRSHL<c>.U8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
    ('VRSHL<c>.U16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
    ('VRSHL<c>.U32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),
    ('VRSHL<c>.U64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 1, N, 1, M, 0, Qm),

    # VRSHR A8-1034 FIXME size encoded in imm
    #('VRSHR<c>.S8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
    #('VRSHR<c>.S16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
    #('VRSHR<c>.S32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
    #('VRSHR<c>.S64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),

    #('VRSHR<c>.U8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
    #('VRSHR<c>.U16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
    #('VRSHR<c>.U32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),
    #('VRSHR<c>.U64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 0, L, 0, M, 1, Dm),

    #('VRSHR<c>.S8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
    #('VRSHR<c>.S16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
    #('VRSHR<c>.S32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
    #('VRSHR<c>.S64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),

    #('VRSHR<c>.U8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
    #('VRSHR<c>.U16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
    #('VRSHR<c>.U32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),
    #('VRSHR<c>.U64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 0, L, 1, M, 1, Qm),

    # VRSHRN A8-1036 FIXME size encoded in imm6
    #('VRSHRN<c>.I16 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
    #('VRSHRN<c>.I32 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),
    #('VRSHRN<c>.I64 <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 1, M, 1, Qm),

    # VRSQRTE A8-1038
    ('VRSQRTE<c>.U32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 0, 0, 1, 0, M, 0, Dm),
    ('VRSQRTE<c>.F32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Dd, 0, 1, 0, 1, 1, 0, M, 0, Dm),

    ('VRSQRTE<c>.U32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 0, 0, 1, 1, M, 0, Qm),
    ('VRSQRTE<c>.F32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 1, Qd, 0, 1, 0, 1, 1, 1, M, 0, Qm),

    # VRSQRTS A8-1040
    ('VRSQRTS<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 1, 1, 1, N, 0, M, 1, Dm),
    ('VRSQRTS<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 1, 1, 1, N, 1, M, 1, Qm),

    # VRSRA A8-1042 FIXME size encded in imm
    #('VRSRA<c>.S8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
    #('VRSRA<c>.S16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
    #('VRSRA<c>.S32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
    #('VRSRA<c>.S64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),

    #('VRSRA<c>.U8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
    #('VRSRA<c>.U16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
    #('VRSRA<c>.U32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),
    #('VRSRA<c>.U64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 0, 1, 1, L, 0, M, 1, Dm),

    #('VRSRA<c>.S8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
    #('VRSRA<c>.S16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
    #('VRSRA<c>.S32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
    #('VRSRA<c>.S64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),

    #('VRSRA<c>.U8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
    #('VRSRA<c>.U16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
    #('VRSRA<c>.U32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),
    #('VRSRA<c>.U64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Qd, 0, 0, 1, 1, L, 1, M, 1, Qm),

    # VRSUBHN A8-1044
    ('VRSUBHN<c>.I16 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
    ('VRSUBHN<c>.I32 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
    ('VRSUBHN<c>.I64 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),

    # VSHL (immediate) A8-1046 FIXME size encoded in imm6
    #('VSHL<c>.I8  <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 0, 1, L, 0, M, 1, Dm),
    #('VSHL<c>.I16 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 0, 1, L, 0, M, 1, Dm),
    #('VSHL<c>.I32 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 0, 1, L, 0, M, 1, Dm),
    #('VSHL<c>.I64 <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 0, 1, 0, 1, L, 0, M, 1, Dm),

    #('VSHL<c>.I8  <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 0, 1, L, 1, M, 1, Qm),
    #('VSHL<c>.I16 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 0, 1, L, 1, M, 1, Qm),
    #('VSHL<c>.I32 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 0, 1, L, 1, M, 1, Qm),
    #('VSHL<c>.I64 <Qd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Qd, 0, 1, 0, 1, L, 1, M, 1, Qm),

    # VSHL (register) A8-1048
    ('VSHL<c>.S8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
    ('VSHL<c>.S16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
    ('VSHL<c>.S32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
    ('VSHL<c>.S64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),

    ('VSHL<c>.U8  <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
    ('VSHL<c>.U16 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
    ('VSHL<c>.U32 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),
    ('VSHL<c>.U64 <Dd>, <Dm>, <Dn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 0, 1, 0, 0, N, 0, M, 0, Dm),

    ('VSHL<c>.S8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
    ('VSHL<c>.S16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
    ('VSHL<c>.S32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
    ('VSHL<c>.S64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),

    ('VSHL<c>.U8  <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
    ('VSHL<c>.U16 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
    ('VSHL<c>.U32 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),
    ('VSHL<c>.U64 <Qd>, <Qm>, <Qn>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 0, 1, 0, 0, N, 1, M, 0, Qm),

    # VSHLL A8-1050
    #('VSHLL<c>.dt <Qd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, U, 1, D, imm6, Qd, 1, 0, 1, 0, 0, 0, M, 1, Dm), FIXME size encoded in imm6

    # VSHR A8-1052
    #('VSHR<c>.dt <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, U, 1, D, imm6, Dd, 0, 0, 0, 0, L, Q, M, 1, Dm), FIXME size encoded in imm6

    # VSHRN A8-1054
    #('VSHRN<c>.dt <Dd>, <Qm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, imm6, Dd, 1, 0, 0, 0, 0, 0, M, 1, Qm), FIXME size encoded in imm6

    # VSLI A8-1056
    #('VSLI<c>.dt <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 0, 1, L, Q, M, 1, Dm), FIXME size encoded in imm6

    # VSRA A8-1060
    #('VSRA<c>.dt <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, U, 1, D, imm6, Dd, 0, 0, 0, 1, L, Q, M, 1, Dm), FIXME size encoded in imm6

    # VSRI A8-1062
    #('VSRI<c>.dt <Dd>, <Dm>, #<imm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, imm6, Dd, 0, 1, 0, 0, L, Q, M, 1, Dm), FIXME size encoded in imm6

    # VST1 (multiple single elements) A8-1064
    ('VST1<c>.8  <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1),

    ('VST1<c>.8  <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1),

    ('VST1<c>.8  <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1),

    ('VST1<c>.8  <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1),

    ('VST1<c>.8  <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 0, Rm),
    ('VST1<c>.16 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 0, Rm),
    ('VST1<c>.32 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 0, Rm),
    ('VST1<c>.64 <Dd>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 0, Rm),

    ('VST1<c>.8  <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 0, 0, 1, Rm),
    ('VST1<c>.16 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 0, 1, 0, 1, Rm),
    ('VST1<c>.32 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 0, 0, 1, Rm),
    ('VST1<c>.64 <Dd>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 1, 1, 1, 0, 1, Rm),

#
    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1),

##
    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1),
##
    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 0, Rm),
    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 0, Rm),
    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 0, Rm),
    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 0, Rm),

    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 0, 1, Rm),
    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 0, 1, Rm),
    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 0, 1, Rm),
    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 0, 1, Rm),

    ('VST1<c>.8  <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 0, 1, 0, Rm),
    ('VST1<c>.16 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 0, 1, 1, 0, Rm),
    ('VST1<c>.32 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 0, 1, 0, Rm),
    ('VST1<c>.64 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 0, 1, 1, 1, 0, Rm),
#
    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 0, Rm),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 0, Rm),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 0, Rm),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 0, Rm),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 0, 0, 1, Rm),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 0, 1, 0, 1, Rm),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 0, 0, 1, Rm),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 1, 0, 1, 1, 0, 1, Rm),

#
    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1),
##
    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1),
##
    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 0, Rm),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 0, Rm),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 0, Rm),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 0, Rm),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 0, 1, Rm),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 0, 1, Rm),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 0, 1, Rm),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 0, 1, Rm),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 0, Rm),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 0, Rm),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 0, Rm),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 0, Rm),

    ('VST1<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 0, 1, 1, Rm),
    ('VST1<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 0, 1, 1, 1, Rm),
    ('VST1<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 0, 1, 1, Rm),
    ('VST1<c>.64 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 0, 1, 1, 1, 1, Rm),

    # VST1 (single element from 1 lane) A8-1066
    # FIXME index_align

    # VST2 (multiple 2-element structures) A8-1068
    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1),
##
    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1),
##
    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 0, Rm),
    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 0, Rm),
    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 0, Rm),

    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 0, Rm),
    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 0, Rm),
    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 0, Rm),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 0, Rm),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 0, Rm),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 0, Rm),

#
    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1),
##
    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1),

##
    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 0, 1, Rm),
    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 0, 1, Rm),
    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 0, 1, Rm),

    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 0, 1, Rm),
    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 0, 1, Rm),
    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 0, 1, Rm),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 0, 1, Rm),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 0, 1, Rm),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 0, 1, Rm),
#
    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1),
##
    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1),

##
    ('VST2<c>.8  <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 0, 1, 0, Rm),
    ('VST2<c>.16 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 0, 1, 1, 0, Rm),
    ('VST2<c>.32 <Dd>, <Dd+1>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 0, 1, 0, 1, 0, Rm),

    ('VST2<c>.8  <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 0, 1, 0, Rm),
    ('VST2<c>.16 <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 0, 1, 1, 0, Rm),
    ('VST2<c>.32 <Dd>, <Dd+2>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 1, 0, 0, 1, 1, 0, 1, 0, Rm),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 0, Rm),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 0, Rm),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 0, Rm),


#
    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1),

    ('VST2<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 0, 1, 1, Rm),
    ('VST2<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 0, 1, 1, 1, Rm),
    ('VST2<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 1, 1, 1, 0, 1, 1, Rm),

    # VST2 (single 2-element structure from one lane) A8-1070
    # FIXME index_align

    # VST3 (multiple 3-element structures) A8-1072
    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
##
    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
##
    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 0, Rm),
    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 0, Rm),
    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 0, Rm),

    ('VST3<c>.8  <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 0, 0, 1, Rm),
    ('VST3<c>.16 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 0, 1, 0, 1, Rm),
    ('VST3<c>.32 <Dd>, <Dd+1>, <Dd+2>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 0, 1, 0, 0, 1, Rm),

    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 0, Rm),
    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 0, Rm),
    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 0, Rm),

    ('VST3<c>.8  <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 0, 0, 1, Rm),
    ('VST3<c>.16 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 0, 1, 0, 1, Rm),
    ('VST3<c>.32 <Dd>, <Dd+2>, <Dd+4>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 1, 0, 1, 1, 0, 0, 1, Rm),

    # VST3 (single 3-element structure from one lane) A8-1074
    # FIXME index_align

    # VST4 (multiple 4-element structures) A8-1076
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
#
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1),
#
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 0, Rm),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 0, Rm),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 0, Rm),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 0, Rm),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 0, Rm),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 0, Rm),
##
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1),
#
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1),
#
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 0, 1, Rm),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 0, 1, Rm),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 0, 1, Rm),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 0, 1, Rm),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 0, 1, Rm),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:64], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 0, 1, Rm),
##
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1),
#
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1),
#
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 0, Rm),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 0, Rm),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 0, Rm),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 0, Rm),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 0, Rm),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:128], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 0, Rm),
##
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1),
#
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256]!', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1),
#
    ('VST4<c>.8  <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 0, 1, 1, Rm),
    ('VST4<c>.16 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 0, 1, 1, 1, Rm),
    ('VST4<c>.32 <Dd>, <Dd+1>, <Dd+2>, <Dd+3>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 0, 1, 0, 1, 1, Rm),

    ('VST4<c>.8  <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 0, 1, 1, Rm),
    ('VST4<c>.16 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 0, 1, 1, 1, Rm),
    ('VST4<c>.32 <Dd>, <Dd+2>, <Dd+4>, <Dd+6>, [<Rn>:256], <Rm>', 1, 1, 1, 1, 0, 1, 0, 0, 0, D, 0, 0, Rn, Dd, 0, 0, 0, 1, 1, 0, 1, 1, Rm),

    # VST4 (single 4-elmement structure from one lane) A8-1078
    # FIXME index_align

    # VSTM A8-1080 FIXME imm8 specifies register list
    ('VSTMIA<c>.64 <Rn>, <list>', cond, 1, 1, 0, 0, 1, D, 0, 0, Rn, Dd, 1, 0, 1, 1, imm8),
    ('VSTMIA<c>.64 <Rn>!, <list>', cond, 1, 1, 0, 0, 1, D, 1, 0, Rn, Dd, 1, 0, 1, 1, imm8),
    ('VSTMDB<c>.64 <Rn>!, <list>', cond, 1, 1, 0, 1, 0, D, 1, 0, Rn, Dd, 1, 0, 1, 1, imm8),

    # VSTR A8-1082
    ('VSTR<c>.64 <Dd>, [<Rn>, #-<imm>]', cond, 1, 1, 0, 1, 0, D, 0, 0, Rn, Dd, 1, 0, 1, 1, imm8),
    ('VSTR<c>.64 <Dd>, [<Rn>, #+<imm>]', cond, 1, 1, 0, 1, 1, D, 0, 0, Rn, Dd, 1, 0, 1, 1, imm8),

    # VSUB A8-1084
    ('VSUB<c>.I8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VSUB<c>.I16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VSUB<c>.I32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VSUB<c>.I64 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),

    ('VSUB<c>.I8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
    ('VSUB<c>.I16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
    ('VSUB<c>.I32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),
    ('VSUB<c>.I64 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 0, D, 1, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 0, Qm),

    # VSUB (floating-point) A8-1086
    ('VSUB<c>.F32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 1, 0, 1, N, 0, M, 0, Dm),
    ('VSUB<c>.F32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 1, 0, 1, N, 1, M, 0, Qm),

    # VSUBHN A8-1088
    ('VSUBHN<c>.I16 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
    ('VSUBHN<c>.I32 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),
    ('VSUBHN<c>.I64 <Dd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Qn, Dd, 0, 1, 1, 0, N, 0, M, 0, Qm),

    # VSUBL A8-1090
    ('VSUBL<c>.S8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VSUBL<c>.S16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VSUBL<c>.S32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VSUBL<c>.U8  <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VSUBL<c>.U16 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),
    ('VSUBL<c>.U32 <Qd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Dn, Qd, 0, 0, 1, 0, N, 0, M, 0, Dm),

    ('VSUBW<c>.S8  <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VSUBW<c>.S16 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VSUBW<c>.S32 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 1, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VSUBW<c>.U8  <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 0, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VSUBW<c>.U16 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 0, 1, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),
    ('VSUBW<c>.U32 <Qd>, <Qn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 0, Qn, Qd, 0, 0, 1, 1, N, 0, M, 0, Dm),

    # VSWP A8-1092
    ('VSWP<c> <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 0, 0, 0, 0, M, 0, Dm),
    ('VSWP<c> <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Qd, 0, 0, 0, 0, 0, 1, M, 0, Qm),

    # VTBL A8-1094
    ('VTBL<c>.8 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 0, Dm),
    ('VTBX<c>.8 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 0, 0, N, 1, M, 0, Dm),

    ('VTBL<c>.8 <Dd>, <Dn>, <Dn+1>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 0, 1, N, 0, M, 0, Dm),
    ('VTBX<c>.8 <Dd>, <Dn>, <Dn+1>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 0, 1, N, 1, M, 0, Dm),

    ('VTBL<c>.8 <Dd>, <Dn>, <Dn+1>, <Dn+2>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 1, 0, N, 0, M, 0, Dm),
    ('VTBX<c>.8 <Dd>, <Dn>, <Dn+1>, <Dn+2>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 1, 0, N, 1, M, 0, Dm),

    ('VTBL<c>.8 <Dd>, <Dn>, <Dn+1>, <Dn+2>, <Dn+3>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 1, 1, N, 0, M, 0, Dm),
    ('VTBX<c>.8 <Dd>, <Dn>, <Dn+1>, <Dn+2>, <Dn+3>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, Dn, Dd, 1, 0, 1, 1, N, 1, M, 0, Dm),

    # VTRN A8-1096
    ('VTRN<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
    ('VTRN<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),
    ('VTRN<c>.32 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Dd, 0, 0, 0, 0, 1, 0, M, 0, Dm),

    ('VTRN<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
    ('VTRN<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),
    ('VTRN<c>.32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Qd, 0, 0, 0, 0, 1, 1, M, 0, Qm),

    # VTST A8-1098
    ('VTST<c>.8  <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),
    ('VTST<c>.16 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),
    ('VTST<c>.32 <Dd>, <Dn>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Dn, Dd, 1, 0, 0, 0, N, 0, M, 1, Dm),

    ('VTST<c>.8  <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),
    ('VTST<c>.16 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 0, 1, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),
    ('VTST<c>.32 <Qd>, <Qn>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 0, 0, D, 1, 0, Qn, Qd, 1, 0, 0, 0, N, 1, M, 1, Qm),

    # VUZP A8-1100
    ('VUZP<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 0, 1, 0, 0, M, 0, Dm),
    ('VUZP<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 0, 1, 0, 0, M, 0, Dm),

    ('VUZP<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
    ('VUZP<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),
    ('VUZP<c>.32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Qd, 0, 0, 0, 1, 0, 1, M, 0, Qm),

    # VZIP A8-1102
    ('VZIP<c>.8  <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),
    ('VZIP<c>.16 <Dd>, <Dm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Dd, 0, 0, 0, 1, 1, 0, M, 0, Dm),

    ('VZIP<c>.8  <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 0, 1, 0, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
    ('VZIP<c>.16 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 0, 1, 1, 0, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm),
    ('VZIP<c>.32 <Qd>, <Qm>', 1, 1, 1, 1, 0, 0, 1, 1, 1, D, 1, 1, 1, 0, 1, 0, Qd, 0, 0, 0, 1, 1, 1, M, 0, Qm)

]

if __name__ == '__main__':
    num = 0
    for description in thumbvfp:
        instr = description[0]
        bits = description[1:]

        bits = [1 if type(x) == int else x.bitsize for x in bits]
        if sum(bits) != 32:
            print(instr, bits, sum(bits))
        num += 1
    print "Verified " + str(num) + " 32-bit thumb vfp instructions"

    num = 0
    for description in armvfp:
        instr = description[0]
        bits = description[1:]

        bits = [1 if type(x) == int else x.bitsize for x in bits]
        if sum(bits) != 32:
            print(instr, bits, sum(bits))
        num += 1
    print "Verified " + str(num) + " 32-bit arm vfp instructions"
